
Trackify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004688  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c8  080047c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  080047dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080047dc  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001047f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002005  00000000  00000000  000304b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000324b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00033328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000124e7  00000000  00000000  000340d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010efc  00000000  00000000  000465b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073ff5  00000000  00000000  000574b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb4a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000cb4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004730 	.word	0x08004730

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004730 	.word	0x08004730

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ba:	b0c1      	sub	sp, #260	; 0x104
 80004bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fd09 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f8db 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fa93 	bl	80009f0 <MX_GPIO_Init>
  MX_ADC_Init();
 80004ca:	f000 f941 	bl	8000750 <MX_ADC_Init>
  MX_I2C1_Init();
 80004ce:	f000 f9a5 	bl	800081c <MX_I2C1_Init>
  MX_I2C2_Init();
 80004d2:	f000 f9e3 	bl	800089c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80004d6:	f000 fa5b 	bl	8000990 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80004da:	f000 fa1f 	bl	800091c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, BAT_EN_Pin, GPIO_PIN_SET);
 80004de:	4b5d      	ldr	r3, [pc, #372]	; (8000654 <main+0x19c>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	2104      	movs	r1, #4
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fb5b 	bl	8001ba0 <HAL_GPIO_WritePin>

  HAL_ADC_Start(&hadc);
 80004ea:	4b5b      	ldr	r3, [pc, #364]	; (8000658 <main+0x1a0>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fef9 	bl	80012e4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80004f2:	2301      	movs	r3, #1
 80004f4:	425a      	negs	r2, r3
 80004f6:	4b58      	ldr	r3, [pc, #352]	; (8000658 <main+0x1a0>)
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 ff46 	bl	800138c <HAL_ADC_PollForConversion>
  uint16_t raw = HAL_ADC_GetValue(&hadc);// raw ADC value
 8000500:	4b55      	ldr	r3, [pc, #340]	; (8000658 <main+0x1a0>)
 8000502:	0018      	movs	r0, r3
 8000504:	f000 ffde 	bl	80014c4 <HAL_ADC_GetValue>
 8000508:	0002      	movs	r2, r0
 800050a:	23ee      	movs	r3, #238	; 0xee
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	801a      	strh	r2, [r3, #0]
  // Test: Set GPIO pin low
  HAL_GPIO_WritePin(GPIOB, BAT_EN_Pin, GPIO_PIN_RESET);
 8000510:	4b50      	ldr	r3, [pc, #320]	; (8000654 <main+0x19c>)
 8000512:	2200      	movs	r2, #0
 8000514:	2104      	movs	r1, #4
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fb42 	bl	8001ba0 <HAL_GPIO_WritePin>

  ///////////////////////////////////////////////////////// barometras

  uint8_t WRITE_ADDR = DEVICE_ADDR;
 800051c:	23ed      	movs	r3, #237	; 0xed
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	22b8      	movs	r2, #184	; 0xb8
 8000522:	701a      	strb	r2, [r3, #0]
  uint8_t READ_ADDR = DEVICE_ADDR | 1;
 8000524:	22b8      	movs	r2, #184	; 0xb8
 8000526:	20ec      	movs	r0, #236	; 0xec
 8000528:	183b      	adds	r3, r7, r0
 800052a:	2101      	movs	r1, #1
 800052c:	430a      	orrs	r2, r1
 800052e:	701a      	strb	r2, [r3, #0]
  uint8_t buf[2];

  HAL_I2C_Mem_Read(&hi2c1, READ_ADDR, LPS22HB_WHO_AM_I, 1, buf, 1, HAL_MAX_DELAY); //should be 10110011b
 8000530:	183b      	adds	r3, r7, r0
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b299      	uxth	r1, r3
 8000536:	4849      	ldr	r0, [pc, #292]	; (800065c <main+0x1a4>)
 8000538:	2301      	movs	r3, #1
 800053a:	425b      	negs	r3, r3
 800053c:	9302      	str	r3, [sp, #8]
 800053e:	2301      	movs	r3, #1
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	25e4      	movs	r5, #228	; 0xe4
 8000544:	197b      	adds	r3, r7, r5
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2301      	movs	r3, #1
 800054a:	220f      	movs	r2, #15
 800054c:	f001 fd24 	bl	8001f98 <HAL_I2C_Mem_Read>
  TMemoryAccessPacket MemoryWritePacket;
  TMemoryAccessPacket MemoryReadPacket;

#define MEMORY_START_ADDRESS	0

	uint16_t MEM_Address_Start=MEMORY_START_ADDRESS; /* current address of EEPROM memory */
 8000550:	21ea      	movs	r1, #234	; 0xea
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	801a      	strh	r2, [r3, #0]
	uint8_t Data[1]={0x1A};
 8000558:	26d8      	movs	r6, #216	; 0xd8
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	4a40      	ldr	r2, [pc, #256]	; (8000660 <main+0x1a8>)
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[1];

  MemoryWritePacket.Address=MEM_Address_Start;
 8000562:	20e0      	movs	r0, #224	; 0xe0
 8000564:	183b      	adds	r3, r7, r0
 8000566:	187a      	adds	r2, r7, r1
 8000568:	8812      	ldrh	r2, [r2, #0]
 800056a:	801a      	strh	r2, [r3, #0]
  MemoryWritePacket.Data=0x1A;
 800056c:	183b      	adds	r3, r7, r0
 800056e:	221a      	movs	r2, #26
 8000570:	709a      	strb	r2, [r3, #2]

  //HAL_I2C_Master_Transmit_IT(&hi2c1, (uint8_t)EEPROM_I2C_WRITE_ADDRESS, (uint8_t*)(&MemoryWritePacket), I2C_SEND_PACKET_LENGTH);
  HAL_I2C_Mem_Write(&hi2c2, EEPROM_I2C_WRITE_ADDRESS, MEM_Address_Start, 2, Data, 1, 1000);
 8000572:	000c      	movs	r4, r1
 8000574:	187b      	adds	r3, r7, r1
 8000576:	881a      	ldrh	r2, [r3, #0]
 8000578:	483a      	ldr	r0, [pc, #232]	; (8000664 <main+0x1ac>)
 800057a:	23fa      	movs	r3, #250	; 0xfa
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	9302      	str	r3, [sp, #8]
 8000580:	2301      	movs	r3, #1
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	19bb      	adds	r3, r7, r6
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2302      	movs	r3, #2
 800058a:	21a0      	movs	r1, #160	; 0xa0
 800058c:	f001 fbd6 	bl	8001d3c <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c2, EEPROM_I2C_READ_ADDRESS, MEM_Address_Start, 2, buffer, 1, 1000);//sould be equal to Data[i]
 8000590:	193b      	adds	r3, r7, r4
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	4833      	ldr	r0, [pc, #204]	; (8000664 <main+0x1ac>)
 8000596:	23fa      	movs	r3, #250	; 0xfa
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	2301      	movs	r3, #1
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	23d4      	movs	r3, #212	; 0xd4
 80005a2:	18fb      	adds	r3, r7, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2302      	movs	r3, #2
 80005a8:	21a1      	movs	r1, #161	; 0xa1
 80005aa:	f001 fcf5 	bl	8001f98 <HAL_I2C_Mem_Read>

  //////////////////////////////////////////////////////////// ACCELEROMETER

  uint8_t WRITE_ADDR_MC3479 = 0x4C << 1;
 80005ae:	23e9      	movs	r3, #233	; 0xe9
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	2298      	movs	r2, #152	; 0x98
 80005b4:	701a      	strb	r2, [r3, #0]
  uint8_t READ_ADDR_MC3479 = 0x4C << 1 | 1;
 80005b6:	21e8      	movs	r1, #232	; 0xe8
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2299      	movs	r2, #153	; 0x99
 80005bc:	701a      	strb	r2, [r3, #0]

  HAL_I2C_Mem_Read(&hi2c1, READ_ADDR_MC3479, 0x4B, 1, buf, 1, HAL_MAX_DELAY); // 0x06 DEFAULT VALUE
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b299      	uxth	r1, r3
 80005c4:	4825      	ldr	r0, [pc, #148]	; (800065c <main+0x1a4>)
 80005c6:	2301      	movs	r3, #1
 80005c8:	425b      	negs	r3, r3
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	197b      	adds	r3, r7, r5
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	224b      	movs	r2, #75	; 0x4b
 80005d8:	f001 fcde 	bl	8001f98 <HAL_I2C_Mem_Read>

  ///////////////////////////////////////////////////////////////PIEZO_TEST//
  HAL_TIM_Base_Start_IT(&htim6);
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <main+0x1b0>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f003 f826 	bl	8003630 <HAL_TIM_Base_Start_IT>

  HAL_Delay(1000);
 80005e4:	23fa      	movs	r3, #250	; 0xfa
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fce3 	bl	8000fb4 <HAL_Delay>

  HAL_TIM_Base_Stop_IT(&htim6);
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <main+0x1b0>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f003 f869 	bl	80036c8 <HAL_TIM_Base_Stop_IT>

  ////////////////////////////////////////////////////////////// AT COMMANDS

  HAL_GPIO_WritePin(GPIOA, PWRKEY_Pin, GPIO_PIN_SET);
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	0059      	lsls	r1, r3, #1
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2201      	movs	r2, #1
 8000600:	0018      	movs	r0, r3
 8000602:	f001 facd 	bl	8001ba0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 fcd4 	bl	8000fb4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, PWRKEY_Pin, GPIO_PIN_RESET);
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	0059      	lsls	r1, r3, #1
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2200      	movs	r2, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fac2 	bl	8001ba0 <HAL_GPIO_WritePin>
  HAL_Delay(6000);
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <main+0x1b4>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fcc8 	bl	8000fb4 <HAL_Delay>

  char data[] = "\r\nATI\r\n"; //send AT
 8000624:	24cc      	movs	r4, #204	; 0xcc
 8000626:	193b      	adds	r3, r7, r4
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <main+0x1b8>)
 800062a:	ca03      	ldmia	r2!, {r0, r1}
 800062c:	c303      	stmia	r3!, {r0, r1}
  uint8_t response[200];// response

  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data) , HAL_MAX_DELAY); //Send command
 800062e:	193b      	adds	r3, r7, r4
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff fd69 	bl	8000108 <strlen>
 8000636:	0003      	movs	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	2301      	movs	r3, #1
 800063c:	425b      	negs	r3, r3
 800063e:	1939      	adds	r1, r7, r4
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x1bc>)
 8000642:	f003 fa6f 	bl	8003b24 <HAL_UART_Transmit>

  HAL_UART_Receive(&huart1, response, 200, 3000);
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <main+0x1c0>)
 8000648:	1d39      	adds	r1, r7, #4
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0x1bc>)
 800064c:	22c8      	movs	r2, #200	; 0xc8
 800064e:	f003 fb11 	bl	8003c74 <HAL_UART_Receive>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x19a>
 8000654:	50000400 	.word	0x50000400
 8000658:	20000028 	.word	0x20000028
 800065c:	20000084 	.word	0x20000084
 8000660:	08004748 	.word	0x08004748
 8000664:	200000d0 	.word	0x200000d0
 8000668:	2000011c 	.word	0x2000011c
 800066c:	00001770 	.word	0x00001770
 8000670:	0800474c 	.word	0x0800474c
 8000674:	2000015c 	.word	0x2000015c
 8000678:	00000bb8 	.word	0x00000bb8

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b09b      	sub	sp, #108	; 0x6c
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	2434      	movs	r4, #52	; 0x34
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2334      	movs	r3, #52	; 0x34
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f004 f847 	bl	8004720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	2320      	movs	r3, #32
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	0018      	movs	r0, r3
 8000698:	2314      	movs	r3, #20
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f004 f83f 	bl	8004720 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	231c      	movs	r3, #28
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f004 f838 	bl	8004720 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <SystemClock_Config+0xd0>)
 80006b6:	401a      	ands	r2, r3
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <SystemClock_Config+0xcc>)
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	0109      	lsls	r1, r1, #4
 80006be:	430a      	orrs	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	0252      	lsls	r2, r2, #9
 80006ce:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 f87b 	bl	80027d4 <HAL_RCC_OscConfig>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006e2:	f000 fa57 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	2120      	movs	r1, #32
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	220f      	movs	r2, #15
 80006ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2202      	movs	r2, #2
 80006f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2100      	movs	r1, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f002 fbcc 	bl	8002ea8 <HAL_RCC_ClockConfig>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000714:	f000 fa3e 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2209      	movs	r2, #9
 800071c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	0018      	movs	r0, r3
 800072e:	f002 fe09 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000736:	f000 fa2d 	bl	8000b94 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800073a:	f002 fcfd 	bl	8003138 <HAL_RCC_EnableCSS>
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b01b      	add	sp, #108	; 0x6c
 8000744:	bd90      	pop	{r4, r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40007000 	.word	0x40007000
 800074c:	ffffe7ff 	.word	0xffffe7ff

08000750 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	2308      	movs	r3, #8
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f003 ffde 	bl	8004720 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_ADC_Init+0xc0>)
 8000766:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <MX_ADC_Init+0xc4>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_ADC_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_ADC_Init+0xc0>)
 8000772:	22c0      	movs	r2, #192	; 0xc0
 8000774:	0612      	lsls	r2, r2, #24
 8000776:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_ADC_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_ADC_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_ADC_Init+0xc0>)
 8000786:	2201      	movs	r2, #1
 8000788:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_ADC_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_ADC_Init+0xc0>)
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_ADC_Init+0xc0>)
 800079a:	2221      	movs	r2, #33	; 0x21
 800079c:	2100      	movs	r1, #0
 800079e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_ADC_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_ADC_Init+0xc0>)
 80007a8:	22c2      	movs	r2, #194	; 0xc2
 80007aa:	32ff      	adds	r2, #255	; 0xff
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_ADC_Init+0xc0>)
 80007b0:	222c      	movs	r2, #44	; 0x2c
 80007b2:	2100      	movs	r1, #0
 80007b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_ADC_Init+0xc0>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_ADC_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_ADC_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_ADC_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_ADC_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_ADC_Init+0xc0>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fc10 	bl	8000ffc <HAL_ADC_Init>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80007e0:	f000 f9d8 	bl	8000b94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007e4:	003b      	movs	r3, r7
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <MX_ADC_Init+0xc8>)
 80007e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007ea:	003b      	movs	r3, r7
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	0152      	lsls	r2, r2, #5
 80007f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f2:	003a      	movs	r2, r7
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_ADC_Init+0xc0>)
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fe6f 	bl	80014dc <HAL_ADC_ConfigChannel>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000802:	f000 f9c7 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000028 	.word	0x20000028
 8000814:	40012400 	.word	0x40012400
 8000818:	24000200 	.word	0x24000200

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C1_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C1_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_I2C1_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_I2C1_Init+0x74>)
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_I2C1_Init+0x74>)
 8000858:	0018      	movs	r0, r3
 800085a:	f001 f9d9 	bl	8001c10 <HAL_I2C_Init>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 f997 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_I2C1_Init+0x74>)
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 ff1a 	bl	80026a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 f98e 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <MX_I2C1_Init+0x74>)
 800087a:	2100      	movs	r1, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f001 ff5d 	bl	800273c <HAL_I2CEx_ConfigDigitalFilter>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 f985 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000084 	.word	0x20000084
 8000894:	40005400 	.word	0x40005400
 8000898:	2000090e 	.word	0x2000090e

0800089c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_I2C2_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <MX_I2C2_Init+0x7c>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_I2C2_Init+0x74>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 f999 	bl	8001c10 <HAL_I2C_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e2:	f000 f957 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_I2C2_Init+0x74>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 feda 	bl	80026a4 <HAL_I2CEx_ConfigAnalogFilter>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 f94e 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <MX_I2C2_Init+0x74>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 ff1d 	bl	800273c <HAL_I2CEx_ConfigDigitalFilter>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 f945 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000d0 	.word	0x200000d0
 8000914:	40005800 	.word	0x40005800
 8000918:	2000090e 	.word	0x2000090e

0800091c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	003b      	movs	r3, r7
 8000924:	0018      	movs	r0, r3
 8000926:	2308      	movs	r3, #8
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f003 fef8 	bl	8004720 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM6_Init+0x6c>)
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <MX_TIM6_Init+0x70>)
 8000934:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_TIM6_Init+0x6c>)
 8000938:	2264      	movs	r2, #100	; 0x64
 800093a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_TIM6_Init+0x6c>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_TIM6_Init+0x6c>)
 8000944:	220a      	movs	r2, #10
 8000946:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_TIM6_Init+0x6c>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_TIM6_Init+0x6c>)
 8000950:	0018      	movs	r0, r3
 8000952:	f002 fe2d 	bl	80035b0 <HAL_TIM_Base_Init>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800095a:	f000 f91b 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095e:	003b      	movs	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	003b      	movs	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800096a:	003a      	movs	r2, r7
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_TIM6_Init+0x6c>)
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f003 f82b 	bl	80039cc <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800097a:	f000 f90b 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	2000011c 	.word	0x2000011c
 800098c:	40001000 	.word	0x40001000

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_USART1_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 800099c:	22e1      	movs	r2, #225	; 0xe1
 800099e:	0212      	lsls	r2, r2, #8
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f003 f851 	bl	8003a7c <HAL_UART_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f8d9 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000015c 	.word	0x2000015c
 80009ec:	40013800 	.word	0x40013800

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	2414      	movs	r4, #20
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	0018      	movs	r0, r3
 80009fc:	2314      	movs	r3, #20
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f003 fe8d 	bl	8004720 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b46      	ldr	r3, [pc, #280]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0a:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a12:	4b43      	ldr	r3, [pc, #268]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	2204      	movs	r2, #4
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	430a      	orrs	r2, r1
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a3a:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a46:	2202      	movs	r2, #2
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a52:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BAT_EN_Pin|WP_Pin|SIMCON_RST_Pin|PIEZO_Pin, GPIO_PIN_RESET);
 8000a66:	492f      	ldr	r1, [pc, #188]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_GPIO_Init+0x138>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f001 f897 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWRKEY_Pin|DTR_Pin, GPIO_PIN_RESET);
 8000a72:	2388      	movs	r3, #136	; 0x88
 8000a74:	0159      	lsls	r1, r3, #5
 8000a76:	23a0      	movs	r3, #160	; 0xa0
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 f88f 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BAROMETER_INT_Pin */
  GPIO_InitStruct.Pin = BAROMETER_INT_Pin;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0192      	lsls	r2, r2, #6
 8000a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2288      	movs	r2, #136	; 0x88
 8000a8e:	0352      	lsls	r2, r2, #13
 8000a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BAROMETER_INT_GPIO_Port, &GPIO_InitStruct);
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <MX_GPIO_Init+0x13c>)
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	0010      	movs	r0, r2
 8000aa0:	f000 ff08 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAT_EN_Pin WP_Pin SIMCON_RST_Pin PIEZO_Pin */
  GPIO_InitStruct.Pin = BAT_EN_Pin|WP_Pin|SIMCON_RST_Pin|PIEZO_Pin;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2201      	movs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <MX_GPIO_Init+0x138>)
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	0010      	movs	r0, r2
 8000ac4:	f000 fef6 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRKEY_Pin DTR_Pin */
  GPIO_InitStruct.Pin = PWRKEY_Pin|DTR_Pin;
 8000ac8:	0021      	movs	r1, r4
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2288      	movs	r2, #136	; 0x88
 8000ace:	0152      	lsls	r2, r2, #5
 8000ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	000c      	movs	r4, r1
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	193a      	adds	r2, r7, r4
 8000ae8:	23a0      	movs	r3, #160	; 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fee0 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RING_Pin */
  GPIO_InitStruct.Pin = RING_Pin;
 8000af4:	0021      	movs	r1, r4
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RING_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	187a      	adds	r2, r7, r1
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fece 	bl	80018b4 <HAL_GPIO_Init>

}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b00b      	add	sp, #44	; 0x2c
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	40021000 	.word	0x40021000
 8000b24:	00009024 	.word	0x00009024
 8000b28:	50000400 	.word	0x50000400
 8000b2c:	50000800 	.word	0x50000800

08000b30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle piezo
  if (htim == &htim6 )
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d11f      	bne.n	8000b80 <HAL_TIM_PeriodElapsedCallback+0x50>
  {
	  if(cnt<1000){
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	23fa      	movs	r3, #250	; 0xfa
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	da0a      	bge.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x32>
		  HAL_GPIO_TogglePin(GPIOB, PIEZO_Pin);
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b4e:	2120      	movs	r1, #32
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 f842 	bl	8001bda <HAL_GPIO_TogglePin>
		  cnt++;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b5e:	601a      	str	r2, [r3, #0]
	  else{
		  cnt=0;
	  }

  }
}
 8000b60:	e00e      	b.n	8000b80 <HAL_TIM_PeriodElapsedCallback+0x50>
	  else if(cnt<1200){
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	2396      	movs	r3, #150	; 0x96
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	da05      	bge.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x4a>
		  cnt++;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	e002      	b.n	8000b80 <HAL_TIM_PeriodElapsedCallback+0x50>
		  cnt=0;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000011c 	.word	0x2000011c
 8000b8c:	200001e0 	.word	0x200001e0
 8000b90:	50000400 	.word	0x50000400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_MspInit+0x24>)
 8000ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x24>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_MspInit+0x24>)
 8000bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_MspInit+0x24>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0549      	lsls	r1, r1, #21
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	240c      	movs	r4, #12
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	2314      	movs	r3, #20
 8000bd8:	001a      	movs	r2, r3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f003 fda0 	bl	8004720 <memset>
  if(hadc->Instance==ADC1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_ADC_MspInit+0x70>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d121      	bne.n	8000c2e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_ADC_MspInit+0x74>)
 8000bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_ADC_MspInit+0x74>)
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	0089      	lsls	r1, r1, #2
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_ADC_MspInit+0x74>)
 8000bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_ADC_MspInit+0x74>)
 8000bfe:	2102      	movs	r1, #2
 8000c00:	430a      	orrs	r2, r1
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_ADC_MspInit+0x74>)
 8000c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2202      	movs	r2, #2
 8000c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2203      	movs	r2, #3
 8000c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_ADC_MspInit+0x78>)
 8000c26:	0019      	movs	r1, r3
 8000c28:	0010      	movs	r0, r2
 8000c2a:	f000 fe43 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b009      	add	sp, #36	; 0x24
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40012400 	.word	0x40012400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	50000400 	.word	0x50000400

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	2414      	movs	r4, #20
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	2314      	movs	r3, #20
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f003 fd62 	bl	8004720 <memset>
  if(hi2c->Instance==I2C1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <HAL_I2C_MspInit+0x10c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d129      	bne.n	8000cba <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c6a:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c72:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	2202      	movs	r2, #2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	0021      	movs	r1, r4
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	22c0      	movs	r2, #192	; 0xc0
 8000c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2212      	movs	r2, #18
 8000c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2203      	movs	r2, #3
 8000c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <HAL_I2C_MspInit+0x114>)
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	0010      	movs	r0, r2
 8000ca6:	f000 fe05 	bl	80018b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	0389      	lsls	r1, r1, #14
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cb8:	e046      	b.n	8000d48 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <HAL_I2C_MspInit+0x118>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d141      	bne.n	8000d48 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000cca:	2102      	movs	r1, #2
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cdc:	2114      	movs	r1, #20
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce6:	000c      	movs	r4, r1
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2212      	movs	r2, #18
 8000cec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2206      	movs	r2, #6
 8000cfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_I2C_MspInit+0x114>)
 8000d04:	0019      	movs	r1, r3
 8000d06:	0010      	movs	r0, r2
 8000d08:	f000 fdd4 	bl	80018b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	0192      	lsls	r2, r2, #6
 8000d14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2212      	movs	r2, #18
 8000d1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2203      	movs	r2, #3
 8000d26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <HAL_I2C_MspInit+0x114>)
 8000d32:	0019      	movs	r1, r3
 8000d34:	0010      	movs	r0, r2
 8000d36:	f000 fdbd 	bl	80018b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_I2C_MspInit+0x110>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	03c9      	lsls	r1, r1, #15
 8000d44:	430a      	orrs	r2, r1
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b00b      	add	sp, #44	; 0x2c
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	50000400 	.word	0x50000400
 8000d5c:	40005800 	.word	0x40005800

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_TIM_Base_MspInit+0x38>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10d      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_TIM_Base_MspInit+0x3c>)
 8000d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_TIM_Base_MspInit+0x3c>)
 8000d78:	2110      	movs	r1, #16
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2011      	movs	r0, #17
 8000d84:	f000 fd64 	bl	8001850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d88:	2011      	movs	r0, #17
 8000d8a:	f000 fd76 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40001000 	.word	0x40001000
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	240c      	movs	r4, #12
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	0018      	movs	r0, r3
 8000dae:	2314      	movs	r3, #20
 8000db0:	001a      	movs	r2, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	f003 fcb4 	bl	8004720 <memset>
  if(huart->Instance==USART1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0x80>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12a      	bne.n	8000e18 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0x84>)
 8000dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_UART_MspInit+0x84>)
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	01c9      	lsls	r1, r1, #7
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_UART_MspInit+0x84>)
 8000dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_UART_MspInit+0x84>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_UART_MspInit+0x84>)
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	2201      	movs	r2, #1
 8000de2:	4013      	ands	r3, r2
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	22c0      	movs	r2, #192	; 0xc0
 8000dec:	00d2      	lsls	r2, r2, #3
 8000dee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	0021      	movs	r1, r4
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2202      	movs	r2, #2
 8000df6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2203      	movs	r2, #3
 8000e02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2204      	movs	r2, #4
 8000e08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	187a      	adds	r2, r7, r1
 8000e0c:	23a0      	movs	r3, #160	; 0xa0
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	0011      	movs	r1, r2
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 fd4e 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b009      	add	sp, #36	; 0x24
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40021000 	.word	0x40021000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000e2c:	f002 fa6e 	bl	800330c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x8>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f894 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <TIM6_IRQHandler+0x14>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 fc56 	bl	8003714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	2000011c 	.word	0x2000011c

08000e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eaa:	f7ff ffe3 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f003 fc13 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb01 	bl	80004b8 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
   ldr   r0, =_estack
 8000eb8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec4:	080047d0 	.word	0x080047d0
  ldr r2, =_sbss
 8000ec8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ecc:	200001e8 	.word	0x200001e8

08000ed0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_COMP_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x3c>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Init+0x3c>)
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f811 	bl	8000f14 <HAL_InitTick>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e001      	b.n	8000f02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efe:	f7ff fe4f 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	40022000 	.word	0x40022000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f1e:	681c      	ldr	r4, [r3, #0]
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_InitTick+0x60>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	0019      	movs	r1, r3
 8000f26:	23fa      	movs	r3, #250	; 0xfa
 8000f28:	0098      	lsls	r0, r3, #2
 8000f2a:	f7ff f8f5 	bl	8000118 <__udivsi3>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	0019      	movs	r1, r3
 8000f32:	0020      	movs	r0, r4
 8000f34:	f7ff f8f0 	bl	8000118 <__udivsi3>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fcad 	bl	800189a <HAL_SYSTICK_Config>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e00f      	b.n	8000f68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d80b      	bhi.n	8000f66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
 8000f54:	2200      	movs	r2, #0
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fc7a 	bl	8001850 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_InitTick+0x64>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	001a      	movs	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	18d2      	adds	r2, r2, r3
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200001e4 	.word	0x200001e4

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	200001e4 	.word	0x200001e4

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	189b      	adds	r3, r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	f7ff ffe0 	bl	8000fa0 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e159      	b.n	80012c2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10a      	bne.n	800102c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2250      	movs	r2, #80	; 0x50
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff fdce 	bl	8000bc8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001030:	2210      	movs	r2, #16
 8001032:	4013      	ands	r3, r2
 8001034:	2b10      	cmp	r3, #16
 8001036:	d005      	beq.n	8001044 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2204      	movs	r2, #4
 8001040:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001042:	d00b      	beq.n	800105c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001048:	2210      	movs	r2, #16
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2250      	movs	r2, #80	; 0x50
 8001054:	2100      	movs	r1, #0
 8001056:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e132      	b.n	80012c2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001060:	4a9a      	ldr	r2, [pc, #616]	; (80012cc <HAL_ADC_Init+0x2d0>)
 8001062:	4013      	ands	r3, r2
 8001064:	2202      	movs	r2, #2
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_ADC_Init+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_ADC_Init+0x90>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_ADC_Init+0x92>
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d149      	bne.n	8001126 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	061b      	lsls	r3, r3, #24
 800109a:	429a      	cmp	r2, r3
 800109c:	d00b      	beq.n	80010b6 <HAL_ADC_Init+0xba>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d005      	beq.n	80010b6 <HAL_ADC_Init+0xba>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	061b      	lsls	r3, r3, #24
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d111      	bne.n	80010da <HAL_ADC_Init+0xde>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	0892      	lsrs	r2, r2, #2
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6919      	ldr	r1, [r3, #16]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	e014      	b.n	8001104 <HAL_ADC_Init+0x108>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	0892      	lsrs	r2, r2, #2
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 80010f0:	4978      	ldr	r1, [pc, #480]	; (80012d4 <HAL_ADC_Init+0x2d8>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2118      	movs	r1, #24
 8001110:	438a      	bics	r2, r1
 8001112:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001126:	4b6a      	ldr	r3, [pc, #424]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 800112c:	496a      	ldr	r1, [pc, #424]	; (80012d8 <HAL_ADC_Init+0x2dc>)
 800112e:	400a      	ands	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113a:	065a      	lsls	r2, r3, #25
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <HAL_ADC_Init+0x2d4>)
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	055b      	lsls	r3, r3, #21
 800114c:	4013      	ands	r3, r2
 800114e:	d108      	bne.n	8001162 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	0549      	lsls	r1, r1, #21
 800115e:	430a      	orrs	r2, r1
 8001160:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	495b      	ldr	r1, [pc, #364]	; (80012dc <HAL_ADC_Init+0x2e0>)
 800116e:	400a      	ands	r2, r1
 8001170:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68d9      	ldr	r1, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d101      	bne.n	8001188 <HAL_ADC_Init+0x18c>
 8001184:	2304      	movs	r3, #4
 8001186:	e000      	b.n	800118a <HAL_ADC_Init+0x18e>
 8001188:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800118a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2020      	movs	r0, #32
 8001190:	5c1b      	ldrb	r3, [r3, r0]
 8001192:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001194:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	202c      	movs	r0, #44	; 0x2c
 800119a:	5c1b      	ldrb	r3, [r3, r0]
 800119c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800119e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011b4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c2:	23c2      	movs	r3, #194	; 0xc2
 80011c4:	33ff      	adds	r3, #255	; 0xff
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d00b      	beq.n	80011e2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68d9      	ldr	r1, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2221      	movs	r2, #33	; 0x21
 80011e6:	5c9b      	ldrb	r3, [r3, r2]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d11a      	bne.n	8001222 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2220      	movs	r2, #32
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	0249      	lsls	r1, r1, #9
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	e00b      	b.n	8001222 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	2220      	movs	r2, #32
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	2201      	movs	r2, #1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001226:	2b01      	cmp	r3, #1
 8001228:	d11f      	bne.n	800126a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	492a      	ldr	r1, [pc, #168]	; (80012e0 <HAL_ADC_Init+0x2e4>)
 8001236:	400a      	ands	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6919      	ldr	r1, [r3, #16]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001248:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800124e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	e00e      	b.n	8001288 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2101      	movs	r1, #1
 8001284:	438a      	bics	r2, r1
 8001286:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2107      	movs	r1, #7
 8001294:	438a      	bics	r2, r1
 8001296:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6959      	ldr	r1, [r3, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b4:	2203      	movs	r2, #3
 80012b6:	4393      	bics	r3, r2
 80012b8:	2201      	movs	r2, #1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	fffffefd 	.word	0xfffffefd
 80012d0:	40012708 	.word	0x40012708
 80012d4:	ffc3ffff 	.word	0xffc3ffff
 80012d8:	fdffffff 	.word	0xfdffffff
 80012dc:	fffe0219 	.word	0xfffe0219
 80012e0:	fffffc03 	.word	0xfffffc03

080012e4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4013      	ands	r3, r2
 80012fe:	d138      	bne.n	8001372 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2250      	movs	r2, #80	; 0x50
 8001304:	5c9b      	ldrb	r3, [r3, r2]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start+0x2a>
 800130a:	2302      	movs	r3, #2
 800130c:	e038      	b.n	8001380 <HAL_ADC_Start+0x9c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2250      	movs	r2, #80	; 0x50
 8001312:	2101      	movs	r1, #1
 8001314:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d007      	beq.n	800132e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800131e:	230f      	movs	r3, #15
 8001320:	18fc      	adds	r4, r7, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f000 f95f 	bl	80015e8 <ADC_Enable>
 800132a:	0003      	movs	r3, r0
 800132c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d120      	bne.n	800137a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_ADC_Start+0xa4>)
 800133e:	4013      	ands	r3, r2
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	0052      	lsls	r2, r2, #1
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2250      	movs	r2, #80	; 0x50
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	221c      	movs	r2, #28
 800135e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2104      	movs	r1, #4
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	e003      	b.n	800137a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001372:	230f      	movs	r3, #15
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800137a:	230f      	movs	r3, #15
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	781b      	ldrb	r3, [r3, #0]
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b005      	add	sp, #20
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	fffff0fe 	.word	0xfffff0fe

0800138c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d102      	bne.n	80013ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013a6:	2308      	movs	r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e014      	b.n	80013d6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d10b      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013be:	2220      	movs	r2, #32
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2250      	movs	r2, #80	; 0x50
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e072      	b.n	80014b8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013d2:	230c      	movs	r3, #12
 80013d4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013d6:	f7ff fde3 	bl	8000fa0 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013de:	e01f      	b.n	8001420 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	d01c      	beq.n	8001420 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_ADC_PollForConversion+0x70>
 80013ec:	f7ff fdd8 	bl	8000fa0 <HAL_GetTick>
 80013f0:	0002      	movs	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d211      	bcs.n	8001420 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	d10b      	bne.n	8001420 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140c:	2204      	movs	r2, #4
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2250      	movs	r2, #80	; 0x50
 8001418:	2100      	movs	r1, #0
 800141a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e04b      	b.n	80014b8 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	d0d9      	beq.n	80013e0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	23c0      	movs	r3, #192	; 0xc0
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	4013      	ands	r3, r2
 8001446:	d12e      	bne.n	80014a6 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800144e:	2b00      	cmp	r3, #0
 8001450:	d129      	bne.n	80014a6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2208      	movs	r2, #8
 800145a:	4013      	ands	r3, r2
 800145c:	2b08      	cmp	r3, #8
 800145e:	d122      	bne.n	80014a6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2204      	movs	r2, #4
 8001468:	4013      	ands	r3, r2
 800146a:	d110      	bne.n	800148e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	210c      	movs	r1, #12
 8001478:	438a      	bics	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_ADC_PollForConversion+0x134>)
 8001482:	4013      	ands	r3, r2
 8001484:	2201      	movs	r2, #1
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
 800148c:	e00b      	b.n	80014a6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	2220      	movs	r2, #32
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	2201      	movs	r2, #1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d103      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b004      	add	sp, #16
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	fffffefe 	.word	0xfffffefe

080014c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2250      	movs	r2, #80	; 0x50
 80014ea:	5c9b      	ldrb	r3, [r3, r2]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x18>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e06c      	b.n	80015ce <HAL_ADC_ConfigChannel+0xf2>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2250      	movs	r2, #80	; 0x50
 80014f8:	2101      	movs	r1, #1
 80014fa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d00b      	beq.n	8001520 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	2220      	movs	r2, #32
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2250      	movs	r2, #80	; 0x50
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e056      	b.n	80015ce <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <HAL_ADC_ConfigChannel+0xfc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d028      	beq.n	800157c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	035b      	lsls	r3, r3, #13
 8001536:	0b5a      	lsrs	r2, r3, #13
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	02db      	lsls	r3, r3, #11
 8001548:	4013      	ands	r3, r2
 800154a:	d009      	beq.n	8001560 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0409      	lsls	r1, r1, #16
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800155a:	200a      	movs	r0, #10
 800155c:	f000 f8ac 	bl	80016b8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	029b      	lsls	r3, r3, #10
 8001568:	4013      	ands	r3, r2
 800156a:	d02b      	beq.n	80015c4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	03c9      	lsls	r1, r1, #15
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e023      	b.n	80015c4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	035b      	lsls	r3, r3, #13
 8001588:	0b5b      	lsrs	r3, r3, #13
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	02db      	lsls	r3, r3, #11
 800159c:	4013      	ands	r3, r2
 800159e:	d005      	beq.n	80015ac <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_ADC_ConfigChannel+0x104>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	029b      	lsls	r3, r3, #10
 80015b4:	4013      	ands	r3, r2
 80015b6:	d005      	beq.n	80015c4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 80015be:	4909      	ldr	r1, [pc, #36]	; (80015e4 <HAL_ADC_ConfigChannel+0x108>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2250      	movs	r2, #80	; 0x50
 80015c8:	2100      	movs	r1, #0
 80015ca:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	00001001 	.word	0x00001001
 80015dc:	40012708 	.word	0x40012708
 80015e0:	ff7fffff 	.word	0xff7fffff
 80015e4:	ffbfffff 	.word	0xffbfffff

080015e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2203      	movs	r2, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d108      	bne.n	8001614 <ADC_Enable+0x2c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	4013      	ands	r3, r2
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <ADC_Enable+0x2c>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <ADC_Enable+0x2e>
 8001614:	2300      	movs	r3, #0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d146      	bne.n	80016a8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <ADC_Enable+0xcc>)
 8001622:	4013      	ands	r3, r2
 8001624:	d00d      	beq.n	8001642 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	2210      	movs	r2, #16
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	2201      	movs	r2, #1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e033      	b.n	80016aa <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 f830 	bl	80016b8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001658:	f7ff fca2 	bl	8000fa0 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001660:	e01b      	b.n	800169a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001662:	f7ff fc9d 	bl	8000fa0 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b0a      	cmp	r3, #10
 800166e:	d914      	bls.n	800169a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4013      	ands	r3, r2
 800167a:	2b01      	cmp	r3, #1
 800167c:	d00d      	beq.n	800169a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	2210      	movs	r2, #16
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	2201      	movs	r2, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e007      	b.n	80016aa <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d1dc      	bne.n	8001662 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	80000017 	.word	0x80000017

080016b8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <ADC_DelayMicroSecond+0x38>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	490b      	ldr	r1, [pc, #44]	; (80016f4 <ADC_DelayMicroSecond+0x3c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7fe fd26 	bl	8000118 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	001a      	movs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4353      	muls	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80016d6:	e002      	b.n	80016de <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3b01      	subs	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f9      	bne.n	80016d8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	20000000 	.word	0x20000000
 80016f4:	000f4240 	.word	0x000f4240

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	0002      	movs	r2, r0
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b7f      	cmp	r3, #127	; 0x7f
 800170a:	d809      	bhi.n	8001720 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	001a      	movs	r2, r3
 8001712:	231f      	movs	r3, #31
 8001714:	401a      	ands	r2, r3
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_EnableIRQ+0x30>)
 8001718:	2101      	movs	r1, #1
 800171a:	4091      	lsls	r1, r2
 800171c:	000a      	movs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
  }
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	0002      	movs	r2, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b7f      	cmp	r3, #127	; 0x7f
 8001740:	d828      	bhi.n	8001794 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <__NVIC_SetPriority+0xd4>)
 8001744:	1dfb      	adds	r3, r7, #7
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	33c0      	adds	r3, #192	; 0xc0
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	589b      	ldr	r3, [r3, r2]
 8001752:	1dfa      	adds	r2, r7, #7
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	0011      	movs	r1, r2
 8001758:	2203      	movs	r2, #3
 800175a:	400a      	ands	r2, r1
 800175c:	00d2      	lsls	r2, r2, #3
 800175e:	21ff      	movs	r1, #255	; 0xff
 8001760:	4091      	lsls	r1, r2
 8001762:	000a      	movs	r2, r1
 8001764:	43d2      	mvns	r2, r2
 8001766:	401a      	ands	r2, r3
 8001768:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	019b      	lsls	r3, r3, #6
 800176e:	22ff      	movs	r2, #255	; 0xff
 8001770:	401a      	ands	r2, r3
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	2303      	movs	r3, #3
 800177a:	4003      	ands	r3, r0
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001780:	481f      	ldr	r0, [pc, #124]	; (8001800 <__NVIC_SetPriority+0xd4>)
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	430a      	orrs	r2, r1
 800178c:	33c0      	adds	r3, #192	; 0xc0
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001792:	e031      	b.n	80017f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <__NVIC_SetPriority+0xd8>)
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	0019      	movs	r1, r3
 800179c:	230f      	movs	r3, #15
 800179e:	400b      	ands	r3, r1
 80017a0:	3b08      	subs	r3, #8
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3306      	adds	r3, #6
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	18d3      	adds	r3, r2, r3
 80017aa:	3304      	adds	r3, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	1dfa      	adds	r2, r7, #7
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	0011      	movs	r1, r2
 80017b4:	2203      	movs	r2, #3
 80017b6:	400a      	ands	r2, r1
 80017b8:	00d2      	lsls	r2, r2, #3
 80017ba:	21ff      	movs	r1, #255	; 0xff
 80017bc:	4091      	lsls	r1, r2
 80017be:	000a      	movs	r2, r1
 80017c0:	43d2      	mvns	r2, r2
 80017c2:	401a      	ands	r2, r3
 80017c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	22ff      	movs	r2, #255	; 0xff
 80017cc:	401a      	ands	r2, r3
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	0018      	movs	r0, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	4003      	ands	r3, r0
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <__NVIC_SetPriority+0xd8>)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	001c      	movs	r4, r3
 80017e4:	230f      	movs	r3, #15
 80017e6:	4023      	ands	r3, r4
 80017e8:	3b08      	subs	r3, #8
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	430a      	orrs	r2, r1
 80017ee:	3306      	adds	r3, #6
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	18c3      	adds	r3, r0, r3
 80017f4:	3304      	adds	r3, #4
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b003      	add	sp, #12
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	045b      	lsls	r3, r3, #17
 8001818:	429a      	cmp	r2, r3
 800181a:	d301      	bcc.n	8001820 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181c:	2301      	movs	r3, #1
 800181e:	e010      	b.n	8001842 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <SysTick_Config+0x44>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	3a01      	subs	r2, #1
 8001826:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001828:	2301      	movs	r3, #1
 800182a:	425b      	negs	r3, r3
 800182c:	2103      	movs	r1, #3
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff ff7c 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x44>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x44>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	210f      	movs	r1, #15
 800185c:	187b      	adds	r3, r7, r1
 800185e:	1c02      	adds	r2, r0, #0
 8001860:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	187b      	adds	r3, r7, r1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25b      	sxtb	r3, r3
 800186a:	0011      	movs	r1, r2
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	0002      	movs	r2, r0
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b25b      	sxtb	r3, r3
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff ff33 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff ffaf 	bl	8001808 <SysTick_Config>
 80018aa:	0003      	movs	r3, r0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80018ca:	e14f      	b.n	8001b6c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4091      	lsls	r1, r2
 80018d6:	000a      	movs	r2, r1
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d100      	bne.n	80018e4 <HAL_GPIO_Init+0x30>
 80018e2:	e140      	b.n	8001b66 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2203      	movs	r2, #3
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d005      	beq.n	80018fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2203      	movs	r2, #3
 80018f6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d130      	bne.n	800195e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	409a      	lsls	r2, r3
 800190a:	0013      	movs	r3, r2
 800190c:	43da      	mvns	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	409a      	lsls	r2, r3
 800191e:	0013      	movs	r3, r2
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001932:	2201      	movs	r2, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	2201      	movs	r2, #1
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2203      	movs	r2, #3
 8001964:	4013      	ands	r3, r2
 8001966:	2b03      	cmp	r3, #3
 8001968:	d017      	beq.n	800199a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d123      	bne.n	80019ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	58d3      	ldr	r3, [r2, r3]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2207      	movs	r2, #7
 80019b8:	4013      	ands	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	409a      	lsls	r2, r3
 80019c0:	0013      	movs	r3, r2
 80019c2:	43da      	mvns	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2107      	movs	r1, #7
 80019d2:	400b      	ands	r3, r1
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	409a      	lsls	r2, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	6939      	ldr	r1, [r7, #16]
 80019ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	23c0      	movs	r3, #192	; 0xc0
 8001a28:	029b      	lsls	r3, r3, #10
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d100      	bne.n	8001a30 <HAL_GPIO_Init+0x17c>
 8001a2e:	e09a      	b.n	8001b66 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_GPIO_Init+0x2d4>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	589b      	ldr	r3, [r3, r2]
 8001a48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4013      	ands	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	409a      	lsls	r2, r3
 8001a56:	0013      	movs	r3, r2
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	23a0      	movs	r3, #160	; 0xa0
 8001a64:	05db      	lsls	r3, r3, #23
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x1ea>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <HAL_GPIO_Init+0x2d8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x1e6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x1e2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x1de>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a44      	ldr	r2, [pc, #272]	; (8001b98 <HAL_GPIO_Init+0x2e4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x1da>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4935      	ldr	r1, [pc, #212]	; (8001b88 <HAL_GPIO_Init+0x2d4>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001abe:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	025b      	lsls	r3, r3, #9
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	035b      	lsls	r3, r3, #13
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43da      	mvns	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	039b      	lsls	r3, r3, #14
 8001b54:	4013      	ands	r3, r2
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	40da      	lsrs	r2, r3
 8001b74:	1e13      	subs	r3, r2, #0
 8001b76:	d000      	beq.n	8001b7a <HAL_GPIO_Init+0x2c6>
 8001b78:	e6a8      	b.n	80018cc <HAL_GPIO_Init+0x18>
  }
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b006      	add	sp, #24
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	50000400 	.word	0x50000400
 8001b90:	50000800 	.word	0x50000800
 8001b94:	50000c00 	.word	0x50000c00
 8001b98:	50001c00 	.word	0x50001c00
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	0008      	movs	r0, r1
 8001baa:	0011      	movs	r1, r2
 8001bac:	1cbb      	adds	r3, r7, #2
 8001bae:	1c02      	adds	r2, r0, #0
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	1c7b      	adds	r3, r7, #1
 8001bb4:	1c0a      	adds	r2, r1, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb8:	1c7b      	adds	r3, r7, #1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001bca:	1cbb      	adds	r3, r7, #2
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b002      	add	sp, #8
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	000a      	movs	r2, r1
 8001be4:	1cbb      	adds	r3, r7, #2
 8001be6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bee:	1cbb      	adds	r3, r7, #2
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	1cb9      	adds	r1, r7, #2
 8001bfe:	8809      	ldrh	r1, [r1, #0]
 8001c00:	400b      	ands	r3, r1
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b004      	add	sp, #16
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e082      	b.n	8001d28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2241      	movs	r2, #65	; 0x41
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2240      	movs	r2, #64	; 0x40
 8001c32:	2100      	movs	r1, #0
 8001c34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff f803 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2241      	movs	r2, #65	; 0x41
 8001c42:	2124      	movs	r1, #36	; 0x24
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	438a      	bics	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4934      	ldr	r1, [pc, #208]	; (8001d30 <HAL_I2C_Init+0x120>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4931      	ldr	r1, [pc, #196]	; (8001d34 <HAL_I2C_Init+0x124>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0209      	lsls	r1, r1, #8
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	e007      	b.n	8001c9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2184      	movs	r1, #132	; 0x84
 8001c98:	0209      	lsls	r1, r1, #8
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d104      	bne.n	8001cb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	491f      	ldr	r1, [pc, #124]	; (8001d38 <HAL_I2C_Init+0x128>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	491a      	ldr	r1, [pc, #104]	; (8001d34 <HAL_I2C_Init+0x124>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69d9      	ldr	r1, [r3, #28]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2241      	movs	r2, #65	; 0x41
 8001d14:	2120      	movs	r1, #32
 8001d16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2242      	movs	r2, #66	; 0x42
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	f0ffffff 	.word	0xf0ffffff
 8001d34:	ffff7fff 	.word	0xffff7fff
 8001d38:	02008000 	.word	0x02008000

08001d3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	000c      	movs	r4, r1
 8001d46:	0010      	movs	r0, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	1c22      	adds	r2, r4, #0
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	2308      	movs	r3, #8
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	1c02      	adds	r2, r0, #0
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	1dbb      	adds	r3, r7, #6
 8001d5c:	1c0a      	adds	r2, r1, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2241      	movs	r2, #65	; 0x41
 8001d64:	5c9b      	ldrb	r3, [r3, r2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d000      	beq.n	8001d6e <HAL_I2C_Mem_Write+0x32>
 8001d6c:	e10c      	b.n	8001f88 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_I2C_Mem_Write+0x42>
 8001d74:	232c      	movs	r3, #44	; 0x2c
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0ff      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2240      	movs	r2, #64	; 0x40
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_I2C_Mem_Write+0x5c>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0f8      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001da0:	f7ff f8fe 	bl	8000fa0 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	0219      	lsls	r1, r3, #8
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2319      	movs	r3, #25
 8001db4:	2201      	movs	r2, #1
 8001db6:	f000 fb0b 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8001dba:	1e03      	subs	r3, r0, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e3      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2241      	movs	r2, #65	; 0x41
 8001dc6:	2121      	movs	r1, #33	; 0x21
 8001dc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2242      	movs	r2, #66	; 0x42
 8001dce:	2140      	movs	r1, #64	; 0x40
 8001dd0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	222c      	movs	r2, #44	; 0x2c
 8001de2:	18ba      	adds	r2, r7, r2
 8001de4:	8812      	ldrh	r2, [r2, #0]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dee:	1dbb      	adds	r3, r7, #6
 8001df0:	881c      	ldrh	r4, [r3, #0]
 8001df2:	2308      	movs	r3, #8
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	881a      	ldrh	r2, [r3, #0]
 8001df8:	230a      	movs	r3, #10
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	8819      	ldrh	r1, [r3, #0]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	0023      	movs	r3, r4
 8001e0a:	f000 f9f9 	bl	8002200 <I2C_RequestMemoryWrite>
 8001e0e:	1e03      	subs	r3, r0, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0b5      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2bff      	cmp	r3, #255	; 0xff
 8001e26:	d911      	bls.n	8001e4c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	22ff      	movs	r2, #255	; 0xff
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	045c      	lsls	r4, r3, #17
 8001e38:	230a      	movs	r3, #10
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	8819      	ldrh	r1, [r3, #0]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	0023      	movs	r3, r4
 8001e46:	f000 fbf7 	bl	8002638 <I2C_TransferConfig>
 8001e4a:	e012      	b.n	8001e72 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	049c      	lsls	r4, r3, #18
 8001e60:	230a      	movs	r3, #10
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	f000 fbe3 	bl	8002638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 fae8 	bl	800244e <I2C_WaitOnTXISFlagUntilTimeout>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e081      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03a      	beq.n	8001f36 <HAL_I2C_Mem_Write+0x1fa>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d136      	bne.n	8001f36 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	f000 fa7b 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e053      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2bff      	cmp	r3, #255	; 0xff
 8001eea:	d911      	bls.n	8001f10 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	22ff      	movs	r2, #255	; 0xff
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	045c      	lsls	r4, r3, #17
 8001efc:	230a      	movs	r3, #10
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	8819      	ldrh	r1, [r3, #0]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	0023      	movs	r3, r4
 8001f0a:	f000 fb95 	bl	8002638 <I2C_TransferConfig>
 8001f0e:	e012      	b.n	8001f36 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	049c      	lsls	r4, r3, #18
 8001f24:	230a      	movs	r3, #10
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	8819      	ldrh	r1, [r3, #0]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	0023      	movs	r3, r4
 8001f32:	f000 fb81 	bl	8002638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d198      	bne.n	8001e72 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fac0 	bl	80024cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e01a      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	490b      	ldr	r1, [pc, #44]	; (8001f94 <HAL_I2C_Mem_Write+0x258>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2241      	movs	r2, #65	; 0x41
 8001f70:	2120      	movs	r1, #32
 8001f72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2242      	movs	r2, #66	; 0x42
 8001f78:	2100      	movs	r1, #0
 8001f7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
  }
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b007      	add	sp, #28
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	fe00e800 	.word	0xfe00e800

08001f98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	000c      	movs	r4, r1
 8001fa2:	0010      	movs	r0, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	1c22      	adds	r2, r4, #0
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	2308      	movs	r3, #8
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	1c02      	adds	r2, r0, #0
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	1dbb      	adds	r3, r7, #6
 8001fb8:	1c0a      	adds	r2, r1, #0
 8001fba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2241      	movs	r2, #65	; 0x41
 8001fc0:	5c9b      	ldrb	r3, [r3, r2]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d000      	beq.n	8001fca <HAL_I2C_Mem_Read+0x32>
 8001fc8:	e110      	b.n	80021ec <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_I2C_Mem_Read+0x42>
 8001fd0:	232c      	movs	r3, #44	; 0x2c
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2280      	movs	r2, #128	; 0x80
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e103      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_I2C_Mem_Read+0x5c>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0fc      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ffc:	f7fe ffd0 	bl	8000fa0 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	0219      	lsls	r1, r3, #8
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2319      	movs	r3, #25
 8002010:	2201      	movs	r2, #1
 8002012:	f000 f9dd 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0e7      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2241      	movs	r2, #65	; 0x41
 8002022:	2122      	movs	r1, #34	; 0x22
 8002024:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2242      	movs	r2, #66	; 0x42
 800202a:	2140      	movs	r1, #64	; 0x40
 800202c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	222c      	movs	r2, #44	; 0x2c
 800203e:	18ba      	adds	r2, r7, r2
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800204a:	1dbb      	adds	r3, r7, #6
 800204c:	881c      	ldrh	r4, [r3, #0]
 800204e:	2308      	movs	r3, #8
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	881a      	ldrh	r2, [r3, #0]
 8002054:	230a      	movs	r3, #10
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	8819      	ldrh	r1, [r3, #0]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	0023      	movs	r3, r4
 8002066:	f000 f92f 	bl	80022c8 <I2C_RequestMemoryRead>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d005      	beq.n	800207a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2240      	movs	r2, #64	; 0x40
 8002072:	2100      	movs	r1, #0
 8002074:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0b9      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	2bff      	cmp	r3, #255	; 0xff
 8002082:	d911      	bls.n	80020a8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	b2da      	uxtb	r2, r3
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	045c      	lsls	r4, r3, #17
 8002094:	230a      	movs	r3, #10
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	8819      	ldrh	r1, [r3, #0]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <HAL_I2C_Mem_Read+0x260>)
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	0023      	movs	r3, r4
 80020a2:	f000 fac9 	bl	8002638 <I2C_TransferConfig>
 80020a6:	e012      	b.n	80020ce <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	049c      	lsls	r4, r3, #18
 80020bc:	230a      	movs	r3, #10
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	8819      	ldrh	r1, [r3, #0]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_I2C_Mem_Read+0x260>)
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	0023      	movs	r3, r4
 80020ca:	f000 fab5 	bl	8002638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	0013      	movs	r3, r2
 80020d8:	2200      	movs	r2, #0
 80020da:	2104      	movs	r1, #4
 80020dc:	f000 f978 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	1e03      	subs	r3, r0, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e082      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d03a      	beq.n	800219a <HAL_I2C_Mem_Read+0x202>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d136      	bne.n	800219a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800212c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	0013      	movs	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	f000 f949 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 800213e:	1e03      	subs	r3, r0, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e053      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	2bff      	cmp	r3, #255	; 0xff
 800214e:	d911      	bls.n	8002174 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	22ff      	movs	r2, #255	; 0xff
 8002154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	b2da      	uxtb	r2, r3
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	045c      	lsls	r4, r3, #17
 8002160:	230a      	movs	r3, #10
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	8819      	ldrh	r1, [r3, #0]
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	0023      	movs	r3, r4
 800216e:	f000 fa63 	bl	8002638 <I2C_TransferConfig>
 8002172:	e012      	b.n	800219a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	b2da      	uxtb	r2, r3
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	049c      	lsls	r4, r3, #18
 8002188:	230a      	movs	r3, #10
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	8819      	ldrh	r1, [r3, #0]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	2300      	movs	r3, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	0023      	movs	r3, r4
 8002196:	f000 fa4f 	bl	8002638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d194      	bne.n	80020ce <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f98e 	bl	80024cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b0:	1e03      	subs	r3, r0, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e01a      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2220      	movs	r2, #32
 80021be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	490c      	ldr	r1, [pc, #48]	; (80021fc <HAL_I2C_Mem_Read+0x264>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2241      	movs	r2, #65	; 0x41
 80021d4:	2120      	movs	r1, #32
 80021d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2242      	movs	r2, #66	; 0x42
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b007      	add	sp, #28
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	80002400 	.word	0x80002400
 80021fc:	fe00e800 	.word	0xfe00e800

08002200 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	000c      	movs	r4, r1
 800220a:	0010      	movs	r0, r2
 800220c:	0019      	movs	r1, r3
 800220e:	250a      	movs	r5, #10
 8002210:	197b      	adds	r3, r7, r5
 8002212:	1c22      	adds	r2, r4, #0
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	2308      	movs	r3, #8
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	1c02      	adds	r2, r0, #0
 800221c:	801a      	strh	r2, [r3, #0]
 800221e:	1dbb      	adds	r3, r7, #6
 8002220:	1c0a      	adds	r2, r1, #0
 8002222:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002224:	1dbb      	adds	r3, r7, #6
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	045c      	lsls	r4, r3, #17
 800222e:	197b      	adds	r3, r7, r5
 8002230:	8819      	ldrh	r1, [r3, #0]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <I2C_RequestMemoryWrite+0xc4>)
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	0023      	movs	r3, r4
 800223a:	f000 f9fd 	bl	8002638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	6a39      	ldr	r1, [r7, #32]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f902 	bl	800244e <I2C_WaitOnTXISFlagUntilTimeout>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d001      	beq.n	8002252 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e033      	b.n	80022ba <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002252:	1dbb      	adds	r3, r7, #6
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800225a:	2308      	movs	r3, #8
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
 8002268:	e019      	b.n	800229e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800226a:	2308      	movs	r3, #8
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b29b      	uxth	r3, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800227c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227e:	6a39      	ldr	r1, [r7, #32]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f8e3 	bl	800244e <I2C_WaitOnTXISFlagUntilTimeout>
 8002288:	1e03      	subs	r3, r0, #0
 800228a:	d001      	beq.n	8002290 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e014      	b.n	80022ba <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002290:	2308      	movs	r3, #8
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800229e:	6a3a      	ldr	r2, [r7, #32]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	0013      	movs	r3, r2
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	f000 f890 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d001      	beq.n	80022b8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b004      	add	sp, #16
 80022c0:	bdb0      	pop	{r4, r5, r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	80002000 	.word	0x80002000

080022c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	000c      	movs	r4, r1
 80022d2:	0010      	movs	r0, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	250a      	movs	r5, #10
 80022d8:	197b      	adds	r3, r7, r5
 80022da:	1c22      	adds	r2, r4, #0
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	2308      	movs	r3, #8
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	1c02      	adds	r2, r0, #0
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	1dbb      	adds	r3, r7, #6
 80022e8:	1c0a      	adds	r2, r1, #0
 80022ea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022ec:	1dbb      	adds	r3, r7, #6
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	197b      	adds	r3, r7, r5
 80022f4:	8819      	ldrh	r1, [r3, #0]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	4b23      	ldr	r3, [pc, #140]	; (8002388 <I2C_RequestMemoryRead+0xc0>)
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	f000 f99b 	bl	8002638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	6a39      	ldr	r1, [r7, #32]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f8a0 	bl	800244e <I2C_WaitOnTXISFlagUntilTimeout>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e033      	b.n	800237e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002316:	1dbb      	adds	r3, r7, #6
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231e:	2308      	movs	r3, #8
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
 800232c:	e019      	b.n	8002362 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800232e:	2308      	movs	r3, #8
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002342:	6a39      	ldr	r1, [r7, #32]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	0018      	movs	r0, r3
 8002348:	f000 f881 	bl	800244e <I2C_WaitOnTXISFlagUntilTimeout>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d001      	beq.n	8002354 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e014      	b.n	800237e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002354:	2308      	movs	r3, #8
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	0013      	movs	r3, r2
 800236c:	2200      	movs	r2, #0
 800236e:	2140      	movs	r1, #64	; 0x40
 8002370:	f000 f82e 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d001      	beq.n	800237c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bdb0      	pop	{r4, r5, r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	80002000 	.word	0x80002000

0800238c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d103      	bne.n	80023aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d007      	beq.n	80023c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	430a      	orrs	r2, r1
 80023c6:	619a      	str	r2, [r3, #24]
  }
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e0:	e021      	b.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	d01e      	beq.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7fe fdda 	bl	8000fa0 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d302      	bcc.n	80023fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	2220      	movs	r2, #32
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2241      	movs	r2, #65	; 0x41
 800240e:	2120      	movs	r1, #32
 8002410:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2242      	movs	r2, #66	; 0x42
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00f      	b.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4013      	ands	r3, r2
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	425a      	negs	r2, r3
 8002436:	4153      	adcs	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	001a      	movs	r2, r3
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d0ce      	beq.n	80023e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b004      	add	sp, #16
 800244c:	bd80      	pop	{r7, pc}

0800244e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800245a:	e02b      	b.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f86e 	bl	8002544 <I2C_IsAcknowledgeFailed>
 8002468:	1e03      	subs	r3, r0, #0
 800246a:	d001      	beq.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e029      	b.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	3301      	adds	r3, #1
 8002474:	d01e      	beq.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe fd93 	bl	8000fa0 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d113      	bne.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	2220      	movs	r2, #32
 8002492:	431a      	orrs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2241      	movs	r2, #65	; 0x41
 800249c:	2120      	movs	r1, #32
 800249e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2242      	movs	r2, #66	; 0x42
 80024a4:	2100      	movs	r1, #0
 80024a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2240      	movs	r2, #64	; 0x40
 80024ac:	2100      	movs	r1, #0
 80024ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e007      	b.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d1cc      	bne.n	800245c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}

080024cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d8:	e028      	b.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 f82f 	bl	8002544 <I2C_IsAcknowledgeFailed>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e026      	b.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7fe fd57 	bl	8000fa0 <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	2220      	movs	r2, #32
 800250a:	431a      	orrs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2241      	movs	r2, #65	; 0x41
 8002514:	2120      	movs	r1, #32
 8002516:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2242      	movs	r2, #66	; 0x42
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	2100      	movs	r1, #0
 8002526:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2220      	movs	r2, #32
 8002534:	4013      	ands	r3, r2
 8002536:	2b20      	cmp	r3, #32
 8002538:	d1cf      	bne.n	80024da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2210      	movs	r2, #16
 8002558:	4013      	ands	r3, r2
 800255a:	2b10      	cmp	r3, #16
 800255c:	d164      	bne.n	8002628 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	049b      	lsls	r3, r3, #18
 8002568:	401a      	ands	r2, r3
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	049b      	lsls	r3, r3, #18
 800256e:	429a      	cmp	r2, r3
 8002570:	d02b      	beq.n	80025ca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	01c9      	lsls	r1, r1, #7
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002584:	e021      	b.n	80025ca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	d01e      	beq.n	80025ca <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7fe fd08 	bl	8000fa0 <HAL_GetTick>
 8002590:	0002      	movs	r2, r0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <I2C_IsAcknowledgeFailed+0x5e>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d113      	bne.n	80025ca <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	2220      	movs	r2, #32
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	2120      	movs	r1, #32
 80025b4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2242      	movs	r2, #66	; 0x42
 80025ba:	2100      	movs	r1, #0
 80025bc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e02f      	b.n	800262a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d1d6      	bne.n	8002586 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2210      	movs	r2, #16
 80025de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2220      	movs	r2, #32
 80025e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff fece 	bl	800238c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	490e      	ldr	r1, [pc, #56]	; (8002634 <I2C_IsAcknowledgeFailed+0xf0>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	2204      	movs	r2, #4
 8002606:	431a      	orrs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2241      	movs	r2, #65	; 0x41
 8002610:	2120      	movs	r1, #32
 8002612:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2242      	movs	r2, #66	; 0x42
 8002618:	2100      	movs	r1, #0
 800261a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	fe00e800 	.word	0xfe00e800

08002638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	0008      	movs	r0, r1
 8002642:	0011      	movs	r1, r2
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	240a      	movs	r4, #10
 8002648:	193b      	adds	r3, r7, r4
 800264a:	1c02      	adds	r2, r0, #0
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	2009      	movs	r0, #9
 8002650:	183b      	adds	r3, r7, r0
 8002652:	1c0a      	adds	r2, r1, #0
 8002654:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	0d51      	lsrs	r1, r2, #21
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	00d2      	lsls	r2, r2, #3
 8002664:	400a      	ands	r2, r1
 8002666:	490e      	ldr	r1, [pc, #56]	; (80026a0 <I2C_TransferConfig+0x68>)
 8002668:	430a      	orrs	r2, r1
 800266a:	43d2      	mvns	r2, r2
 800266c:	401a      	ands	r2, r3
 800266e:	0011      	movs	r1, r2
 8002670:	193b      	adds	r3, r7, r4
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	059b      	lsls	r3, r3, #22
 8002676:	0d9a      	lsrs	r2, r3, #22
 8002678:	183b      	adds	r3, r7, r0
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	0418      	lsls	r0, r3, #16
 800267e:	23ff      	movs	r3, #255	; 0xff
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	4003      	ands	r3, r0
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	431a      	orrs	r2, r3
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	431a      	orrs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b005      	add	sp, #20
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	03ff63ff 	.word	0x03ff63ff

080026a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2241      	movs	r2, #65	; 0x41
 80026b2:	5c9b      	ldrb	r3, [r3, r2]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d138      	bne.n	800272c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	5c9b      	ldrb	r3, [r3, r2]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e032      	b.n	800272e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	2101      	movs	r1, #1
 80026ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2241      	movs	r2, #65	; 0x41
 80026d4:	2124      	movs	r1, #36	; 0x24
 80026d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	438a      	bics	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4911      	ldr	r1, [pc, #68]	; (8002738 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2101      	movs	r1, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2241      	movs	r2, #65	; 0x41
 800271c:	2120      	movs	r1, #32
 800271e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	ffffefff 	.word	0xffffefff

0800273c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2241      	movs	r2, #65	; 0x41
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	d139      	bne.n	80027c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2240      	movs	r2, #64	; 0x40
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275c:	2302      	movs	r3, #2
 800275e:	e033      	b.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	2101      	movs	r1, #1
 8002766:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2241      	movs	r2, #65	; 0x41
 800276c:	2124      	movs	r1, #36	; 0x24
 800276e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2101      	movs	r1, #1
 800277c:	438a      	bics	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2241      	movs	r2, #65	; 0x41
 80027b6:	2120      	movs	r1, #32
 80027b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2240      	movs	r2, #64	; 0x40
 80027be:	2100      	movs	r1, #0
 80027c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
  }
}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b004      	add	sp, #16
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	fffff0ff 	.word	0xfffff0ff

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b5b0      	push	{r4, r5, r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f000 fb5a 	bl	8002e9c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e8:	4bce      	ldr	r3, [pc, #824]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	220c      	movs	r2, #12
 80027ee:	4013      	ands	r3, r2
 80027f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f2:	4bcc      	ldr	r3, [pc, #816]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	025b      	lsls	r3, r3, #9
 80027fa:	4013      	ands	r3, r2
 80027fc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	d100      	bne.n	800280a <HAL_RCC_OscConfig+0x36>
 8002808:	e07c      	b.n	8002904 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d111      	bne.n	800283a <HAL_RCC_OscConfig+0x66>
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	025b      	lsls	r3, r3, #9
 800281c:	429a      	cmp	r2, r3
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	4bc0      	ldr	r3, [pc, #768]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <HAL_RCC_OscConfig+0x5a>
 800282c:	e069      	b.n	8002902 <HAL_RCC_OscConfig+0x12e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d165      	bne.n	8002902 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e330      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	025b      	lsls	r3, r3, #9
 8002842:	429a      	cmp	r2, r3
 8002844:	d107      	bne.n	8002856 <HAL_RCC_OscConfig+0x82>
 8002846:	4bb7      	ldr	r3, [pc, #732]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4bb6      	ldr	r3, [pc, #728]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	0249      	lsls	r1, r1, #9
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e027      	b.n	80028a6 <HAL_RCC_OscConfig+0xd2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	23a0      	movs	r3, #160	; 0xa0
 800285c:	02db      	lsls	r3, r3, #11
 800285e:	429a      	cmp	r2, r3
 8002860:	d10e      	bne.n	8002880 <HAL_RCC_OscConfig+0xac>
 8002862:	4bb0      	ldr	r3, [pc, #704]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4baf      	ldr	r3, [pc, #700]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	02c9      	lsls	r1, r1, #11
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	4bac      	ldr	r3, [pc, #688]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4bab      	ldr	r3, [pc, #684]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002876:	2180      	movs	r1, #128	; 0x80
 8002878:	0249      	lsls	r1, r1, #9
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e012      	b.n	80028a6 <HAL_RCC_OscConfig+0xd2>
 8002880:	4ba8      	ldr	r3, [pc, #672]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4ba7      	ldr	r3, [pc, #668]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002886:	49a8      	ldr	r1, [pc, #672]	; (8002b28 <HAL_RCC_OscConfig+0x354>)
 8002888:	400a      	ands	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4ba5      	ldr	r3, [pc, #660]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	025b      	lsls	r3, r3, #9
 8002894:	4013      	ands	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4ba2      	ldr	r3, [pc, #648]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4ba1      	ldr	r3, [pc, #644]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80028a0:	49a2      	ldr	r1, [pc, #648]	; (8002b2c <HAL_RCC_OscConfig+0x358>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d014      	beq.n	80028d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fb77 	bl	8000fa0 <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fb72 	bl	8000fa0 <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e2e8      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ca:	4b96      	ldr	r3, [pc, #600]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	4013      	ands	r3, r2
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe4>
 80028d6:	e015      	b.n	8002904 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe fb62 	bl	8000fa0 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e2:	f7fe fb5d 	bl	8000fa0 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e2d3      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f4:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x10e>
 8002900:	e000      	b.n	8002904 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002902:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x13c>
 800290e:	e08b      	b.n	8002a28 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d13e      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1cc>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d13b      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002928:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2204      	movs	r2, #4
 800292e:	4013      	ands	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_RCC_OscConfig+0x168>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e2af      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a7b      	ldr	r2, [pc, #492]	; (8002b30 <HAL_RCC_OscConfig+0x35c>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002952:	4b74      	ldr	r3, [pc, #464]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2209      	movs	r2, #9
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002964:	f000 fbf6 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8002968:	0001      	movs	r1, r0
 800296a:	4b6e      	ldr	r3, [pc, #440]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	220f      	movs	r2, #15
 8002972:	4013      	ands	r3, r2
 8002974:	4a6f      	ldr	r2, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x360>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	000a      	movs	r2, r1
 800297a:	40da      	lsrs	r2, r3
 800297c:	4b6e      	ldr	r3, [pc, #440]	; (8002b38 <HAL_RCC_OscConfig+0x364>)
 800297e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002980:	4b6e      	ldr	r3, [pc, #440]	; (8002b3c <HAL_RCC_OscConfig+0x368>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2513      	movs	r5, #19
 8002986:	197c      	adds	r4, r7, r5
 8002988:	0018      	movs	r0, r3
 800298a:	f7fe fac3 	bl	8000f14 <HAL_InitTick>
 800298e:	0003      	movs	r3, r0
 8002990:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002992:	197b      	adds	r3, r7, r5
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d046      	beq.n	8002a28 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 800299a:	197b      	adds	r3, r7, r5
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	e27d      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d027      	beq.n	80029f6 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029a6:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2209      	movs	r2, #9
 80029ac:	4393      	bics	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe faf2 	bl	8000fa0 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fe faed 	bl	8000fa0 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e263      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2204      	movs	r2, #4
 80029da:	4013      	ands	r3, r2
 80029dc:	d0f1      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b51      	ldr	r3, [pc, #324]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a53      	ldr	r2, [pc, #332]	; (8002b30 <HAL_RCC_OscConfig+0x35c>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	4b4d      	ldr	r3, [pc, #308]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	e018      	b.n	8002a28 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	438a      	bics	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe facd 	bl	8000fa0 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fac8 	bl	8000fa0 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e23e      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2204      	movs	r2, #4
 8002a24:	4013      	ands	r3, r2
 8002a26:	d1f1      	bne.n	8002a0c <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d100      	bne.n	8002a34 <HAL_RCC_OscConfig+0x260>
 8002a32:	e0a1      	b.n	8002b78 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d140      	bne.n	8002abc <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x27e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e224      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a52:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a3a      	ldr	r2, [pc, #232]	; (8002b40 <HAL_RCC_OscConfig+0x36c>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1a      	ldr	r2, [r3, #32]
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a66:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	0a19      	lsrs	r1, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	061a      	lsls	r2, r3, #24
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	0b5b      	lsrs	r3, r3, #13
 8002a80:	3301      	adds	r3, #1
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0212      	lsls	r2, r2, #8
 8002a86:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a88:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	210f      	movs	r1, #15
 8002a90:	400b      	ands	r3, r1
 8002a92:	4928      	ldr	r1, [pc, #160]	; (8002b34 <HAL_RCC_OscConfig+0x360>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x364>)
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_OscConfig+0x368>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2513      	movs	r5, #19
 8002aa2:	197c      	adds	r4, r7, r5
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fe fa35 	bl	8000f14 <HAL_InitTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002aae:	197b      	adds	r3, r7, r5
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d060      	beq.n	8002b78 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	e1ef      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03f      	beq.n	8002b44 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0049      	lsls	r1, r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fa65 	bl	8000fa0 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002adc:	f7fe fa60 	bl	8000fa0 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1d6      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x36c>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	0a19      	lsrs	r1, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	061a      	lsls	r2, r3, #24
 8002b1c:	4b01      	ldr	r3, [pc, #4]	; (8002b24 <HAL_RCC_OscConfig+0x350>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	e029      	b.n	8002b78 <HAL_RCC_OscConfig+0x3a4>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	fffeffff 	.word	0xfffeffff
 8002b2c:	fffbffff 	.word	0xfffbffff
 8002b30:	ffffe0ff 	.word	0xffffe0ff
 8002b34:	08004754 	.word	0x08004754
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b44:	4bbe      	ldr	r3, [pc, #760]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4bbd      	ldr	r3, [pc, #756]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002b4a:	49be      	ldr	r1, [pc, #760]	; (8002e44 <HAL_RCC_OscConfig+0x670>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fa26 	bl	8000fa0 <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fa21 	bl	8000fa0 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e197      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b6c:	4bb4      	ldr	r3, [pc, #720]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d036      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d019      	beq.n	8002bbe <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8a:	4bad      	ldr	r3, [pc, #692]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b8e:	4bac      	ldr	r3, [pc, #688]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fa03 	bl	8000fa0 <HAL_GetTick>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe f9fe 	bl	8000fa0 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e174      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bb2:	4ba3      	ldr	r3, [pc, #652]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d0f1      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x3cc>
 8002bbc:	e018      	b.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bbe:	4ba0      	ldr	r3, [pc, #640]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc2:	4b9f      	ldr	r3, [pc, #636]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe f9e9 	bl	8000fa0 <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe f9e4 	bl	8000fa0 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e15a      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002be6:	4b96      	ldr	r3, [pc, #600]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bea:	2202      	movs	r2, #2
 8002bec:	4013      	ands	r3, r2
 8002bee:	d1f1      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d100      	bne.n	8002bfc <HAL_RCC_OscConfig+0x428>
 8002bfa:	e0ae      	b.n	8002d5a <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfc:	2027      	movs	r0, #39	; 0x27
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c04:	4b8e      	ldr	r3, [pc, #568]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	055b      	lsls	r3, r3, #21
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d109      	bne.n	8002c24 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c14:	4b8a      	ldr	r3, [pc, #552]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	0549      	lsls	r1, r1, #21
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c1e:	183b      	adds	r3, r7, r0
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <HAL_RCC_OscConfig+0x674>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d11a      	bne.n	8002c66 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c30:	4b85      	ldr	r3, [pc, #532]	; (8002e48 <HAL_RCC_OscConfig+0x674>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_RCC_OscConfig+0x674>)
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	0049      	lsls	r1, r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe f9af 	bl	8000fa0 <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe f9aa 	bl	8000fa0 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e120      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b7b      	ldr	r3, [pc, #492]	; (8002e48 <HAL_RCC_OscConfig+0x674>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4013      	ands	r3, r2
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4ae>
 8002c72:	4b73      	ldr	r3, [pc, #460]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0049      	lsls	r1, r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	651a      	str	r2, [r3, #80]	; 0x50
 8002c80:	e031      	b.n	8002ce6 <HAL_RCC_OscConfig+0x512>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4d0>
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c90:	496c      	ldr	r1, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x670>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	651a      	str	r2, [r3, #80]	; 0x50
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c9a:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002c9c:	496b      	ldr	r1, [pc, #428]	; (8002e4c <HAL_RCC_OscConfig+0x678>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ca2:	e020      	b.n	8002ce6 <HAL_RCC_OscConfig+0x512>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	23a0      	movs	r3, #160	; 0xa0
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10e      	bne.n	8002cce <HAL_RCC_OscConfig+0x4fa>
 8002cb0:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb4:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	00c9      	lsls	r1, r1, #3
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	651a      	str	r2, [r3, #80]	; 0x50
 8002cbe:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0049      	lsls	r1, r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	651a      	str	r2, [r3, #80]	; 0x50
 8002ccc:	e00b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x512>
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002cd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002cd4:	495b      	ldr	r1, [pc, #364]	; (8002e44 <HAL_RCC_OscConfig+0x670>)
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	651a      	str	r2, [r3, #80]	; 0x50
 8002cda:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cde:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002ce0:	495a      	ldr	r1, [pc, #360]	; (8002e4c <HAL_RCC_OscConfig+0x678>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d015      	beq.n	8002d1a <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7fe f957 	bl	8000fa0 <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf6:	e009      	b.n	8002d0c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe f952 	bl	8000fa0 <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	4a53      	ldr	r2, [pc, #332]	; (8002e50 <HAL_RCC_OscConfig+0x67c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e0c7      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d0ef      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x524>
 8002d18:	e014      	b.n	8002d44 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe f941 	bl	8000fa0 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d22:	e009      	b.n	8002d38 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7fe f93c 	bl	8000fa0 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	4a48      	ldr	r2, [pc, #288]	; (8002e50 <HAL_RCC_OscConfig+0x67c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0b1      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	d1ef      	bne.n	8002d24 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d44:	2327      	movs	r3, #39	; 0x27
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002d54:	493f      	ldr	r1, [pc, #252]	; (8002e54 <HAL_RCC_OscConfig+0x680>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d100      	bne.n	8002d64 <HAL_RCC_OscConfig+0x590>
 8002d62:	e09a      	b.n	8002e9a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d064      	beq.n	8002e34 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d145      	bne.n	8002dfe <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002d78:	4937      	ldr	r1, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0x684>)
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe f90f 	bl	8000fa0 <HAL_GetTick>
 8002d82:	0003      	movs	r3, r0
 8002d84:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe f90a 	bl	8000fa0 <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e080      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	049b      	lsls	r3, r3, #18
 8002da2:	4013      	ands	r3, r2
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <HAL_RCC_OscConfig+0x688>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	0449      	lsls	r1, r1, #17
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f8e4 	bl	8000fa0 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe f8df 	bl	8000fa0 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e055      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	049b      	lsls	r3, r3, #18
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x60a>
 8002dfc:	e04d      	b.n	8002e9a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002e04:	4914      	ldr	r1, [pc, #80]	; (8002e58 <HAL_RCC_OscConfig+0x684>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f8c9 	bl	8000fa0 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe f8c4 	bl	8000fa0 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e03a      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x66c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	049b      	lsls	r3, r3, #18
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x640>
 8002e32:	e032      	b.n	8002e9a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d111      	bne.n	8002e60 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e02d      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
 8002e40:	40021000 	.word	0x40021000
 8002e44:	fffffeff 	.word	0xfffffeff
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	fffffbff 	.word	0xfffffbff
 8002e50:	00001388 	.word	0x00001388
 8002e54:	efffffff 	.word	0xefffffff
 8002e58:	feffffff 	.word	0xfeffffff
 8002e5c:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e60:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_RCC_OscConfig+0x6d0>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	025b      	lsls	r3, r3, #9
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	23f0      	movs	r3, #240	; 0xf0
 8002e7a:	039b      	lsls	r3, r3, #14
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	23c0      	movs	r3, #192	; 0xc0
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b00a      	add	sp, #40	; 0x28
 8002ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b5b0      	push	{r4, r5, r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e128      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b96      	ldr	r3, [pc, #600]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d91e      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b93      	ldr	r3, [pc, #588]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	4b90      	ldr	r3, [pc, #576]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002edc:	f7fe f860 	bl	8000fa0 <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee4:	e009      	b.n	8002efa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee6:	f7fe f85b 	bl	8000fa0 <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	4a8a      	ldr	r2, [pc, #552]	; (800311c <HAL_RCC_ClockConfig+0x274>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e109      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b87      	ldr	r3, [pc, #540]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f12:	4b83      	ldr	r3, [pc, #524]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	22f0      	movs	r2, #240	; 0xf0
 8002f18:	4393      	bics	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f22:	430a      	orrs	r2, r1
 8002f24:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x8a>
 8002f30:	e089      	b.n	8003046 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3a:	4b79      	ldr	r3, [pc, #484]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	029b      	lsls	r3, r3, #10
 8002f42:	4013      	ands	r3, r2
 8002f44:	d120      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0e1      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f52:	4b73      	ldr	r3, [pc, #460]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	049b      	lsls	r3, r3, #18
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d114      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0d5      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	d109      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0ca      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f78:	4b69      	ldr	r3, [pc, #420]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0c2      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f88:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	4393      	bics	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe f800 	bl	8000fa0 <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d111      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fae:	f7fd fff7 	bl	8000fa0 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_RCC_ClockConfig+0x274>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0a5      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc2:	4b57      	ldr	r3, [pc, #348]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d1ef      	bne.n	8002fae <HAL_RCC_ClockConfig+0x106>
 8002fce:	e03a      	b.n	8003046 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd8:	e009      	b.n	8002fee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fda:	f7fd ffe1 	bl	8000fa0 <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	4a4d      	ldr	r2, [pc, #308]	; (800311c <HAL_RCC_ClockConfig+0x274>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e08f      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fee:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d1ef      	bne.n	8002fda <HAL_RCC_ClockConfig+0x132>
 8002ffa:	e024      	b.n	8003046 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d11b      	bne.n	800303c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003004:	e009      	b.n	800301a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003006:	f7fd ffcb 	bl	8000fa0 <HAL_GetTick>
 800300a:	0002      	movs	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	4a42      	ldr	r2, [pc, #264]	; (800311c <HAL_RCC_ClockConfig+0x274>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e079      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	220c      	movs	r2, #12
 8003020:	4013      	ands	r3, r2
 8003022:	2b04      	cmp	r3, #4
 8003024:	d1ef      	bne.n	8003006 <HAL_RCC_ClockConfig+0x15e>
 8003026:	e00e      	b.n	8003046 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7fd ffba 	bl	8000fa0 <HAL_GetTick>
 800302c:	0002      	movs	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	4a3a      	ldr	r2, [pc, #232]	; (800311c <HAL_RCC_ClockConfig+0x274>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e068      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	220c      	movs	r2, #12
 8003042:	4013      	ands	r3, r2
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d21e      	bcs.n	8003092 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	4393      	bics	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003066:	f7fd ff9b 	bl	8000fa0 <HAL_GetTick>
 800306a:	0003      	movs	r3, r0
 800306c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	e009      	b.n	8003084 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fd ff96 	bl	8000fa0 <HAL_GetTick>
 8003074:	0002      	movs	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <HAL_RCC_ClockConfig+0x274>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e044      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_RCC_ClockConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2201      	movs	r2, #1
 800308a:	4013      	ands	r3, r2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d1ee      	bne.n	8003070 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2204      	movs	r2, #4
 8003098:	4013      	ands	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a20      	ldr	r2, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x27c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2208      	movs	r2, #8
 80030b6:	4013      	ands	r3, r2
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_RCC_ClockConfig+0x280>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	00da      	lsls	r2, r3, #3
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d0:	f000 f840 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80030d4:	0001      	movs	r1, r0
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x278>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	220f      	movs	r2, #15
 80030de:	4013      	ands	r3, r2
 80030e0:	4a12      	ldr	r2, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x284>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	000a      	movs	r2, r1
 80030e6:	40da      	lsrs	r2, r3
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_ClockConfig+0x288>)
 80030ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_ClockConfig+0x28c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	250b      	movs	r5, #11
 80030f2:	197c      	adds	r4, r7, r5
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fd ff0d 	bl	8000f14 <HAL_InitTick>
 80030fa:	0003      	movs	r3, r0
 80030fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80030fe:	197b      	adds	r3, r7, r5
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003106:	197b      	adds	r3, r7, r5
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	e000      	b.n	800310e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b004      	add	sp, #16
 8003114:	bdb0      	pop	{r4, r5, r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	40022000 	.word	0x40022000
 800311c:	00001388 	.word	0x00001388
 8003120:	40021000 	.word	0x40021000
 8003124:	fffff8ff 	.word	0xfffff8ff
 8003128:	ffffc7ff 	.word	0xffffc7ff
 800312c:	08004754 	.word	0x08004754
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_EnableCSS+0x18>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_EnableCSS+0x18>)
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	0309      	lsls	r1, r1, #12
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800315a:	4b4c      	ldr	r3, [pc, #304]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003162:	230c      	movs	r3, #12
 8003164:	4013      	ands	r3, r2
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d014      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x40>
 800316a:	d900      	bls.n	800316e <HAL_RCC_GetSysClockFreq+0x1a>
 800316c:	e07b      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0x112>
 800316e:	2b04      	cmp	r3, #4
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x24>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d00b      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x3a>
 8003176:	e076      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003178:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	4013      	ands	r3, r2
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003186:	e07c      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003188:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_GetSysClockFreq+0x140>)
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800318c:	e079      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800318e:	4b42      	ldr	r3, [pc, #264]	; (8003298 <HAL_RCC_GetSysClockFreq+0x144>)
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003192:	e076      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	0c9a      	lsrs	r2, r3, #18
 8003198:	230f      	movs	r3, #15
 800319a:	401a      	ands	r2, r3
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_GetSysClockFreq+0x148>)
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	0d9a      	lsrs	r2, r3, #22
 80031a6:	2303      	movs	r3, #3
 80031a8:	4013      	ands	r3, r2
 80031aa:	3301      	adds	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	025b      	lsls	r3, r3, #9
 80031b6:	4013      	ands	r3, r2
 80031b8:	d01a      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	4a35      	ldr	r2, [pc, #212]	; (8003298 <HAL_RCC_GetSysClockFreq+0x144>)
 80031c4:	2300      	movs	r3, #0
 80031c6:	69b8      	ldr	r0, [r7, #24]
 80031c8:	69f9      	ldr	r1, [r7, #28]
 80031ca:	f7fd f851 	bl	8000270 <__aeabi_lmul>
 80031ce:	0002      	movs	r2, r0
 80031d0:	000b      	movs	r3, r1
 80031d2:	0010      	movs	r0, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f7fd f825 	bl	8000230 <__aeabi_uldivmod>
 80031e6:	0002      	movs	r2, r0
 80031e8:	000b      	movs	r3, r1
 80031ea:	0013      	movs	r3, r2
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
 80031ee:	e037      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	4013      	ands	r3, r2
 80031f8:	d01a      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003204:	2300      	movs	r3, #0
 8003206:	68b8      	ldr	r0, [r7, #8]
 8003208:	68f9      	ldr	r1, [r7, #12]
 800320a:	f7fd f831 	bl	8000270 <__aeabi_lmul>
 800320e:	0002      	movs	r2, r0
 8003210:	000b      	movs	r3, r1
 8003212:	0010      	movs	r0, r2
 8003214:	0019      	movs	r1, r3
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f7fd f805 	bl	8000230 <__aeabi_uldivmod>
 8003226:	0002      	movs	r2, r0
 8003228:	000b      	movs	r3, r1
 800322a:	0013      	movs	r3, r2
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
 800322e:	e017      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	0018      	movs	r0, r3
 8003234:	2300      	movs	r3, #0
 8003236:	0019      	movs	r1, r3
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_RCC_GetSysClockFreq+0x140>)
 800323a:	2300      	movs	r3, #0
 800323c:	f7fd f818 	bl	8000270 <__aeabi_lmul>
 8003240:	0002      	movs	r2, r0
 8003242:	000b      	movs	r3, r1
 8003244:	0010      	movs	r0, r2
 8003246:	0019      	movs	r1, r3
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	001c      	movs	r4, r3
 800324c:	2300      	movs	r3, #0
 800324e:	001d      	movs	r5, r3
 8003250:	0022      	movs	r2, r4
 8003252:	002b      	movs	r3, r5
 8003254:	f7fc ffec 	bl	8000230 <__aeabi_uldivmod>
 8003258:	0002      	movs	r2, r0
 800325a:	000b      	movs	r3, r1
 800325c:	0013      	movs	r3, r2
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003264:	e00d      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0b5b      	lsrs	r3, r3, #13
 800326c:	2207      	movs	r2, #7
 800326e:	4013      	ands	r3, r2
 8003270:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	3301      	adds	r3, #1
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	0212      	lsls	r2, r2, #8
 800327a:	409a      	lsls	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003280:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b00e      	add	sp, #56	; 0x38
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	003d0900 	.word	0x003d0900
 8003294:	00f42400 	.word	0x00f42400
 8003298:	007a1200 	.word	0x007a1200
 800329c:	0800476c 	.word	0x0800476c

080032a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b02      	ldr	r3, [pc, #8]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff2 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032bc:	0001      	movs	r1, r0
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	2207      	movs	r2, #7
 80032c6:	4013      	ands	r3, r2
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	40d9      	lsrs	r1, r3
 80032ce:	000b      	movs	r3, r1
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08004764 	.word	0x08004764

080032e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032e4:	f7ff ffdc 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032e8:	0001      	movs	r1, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	0adb      	lsrs	r3, r3, #11
 80032f0:	2207      	movs	r2, #7
 80032f2:	4013      	ands	r3, r2
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	40d9      	lsrs	r1, r3
 80032fa:	000b      	movs	r3, r1
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40021000 	.word	0x40021000
 8003308:	08004764 	.word	0x08004764

0800330c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_RCC_NMI_IRQHandler+0x28>)
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	401a      	ands	r2, r3
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	429a      	cmp	r2, r3
 8003320:	d105      	bne.n	800332e <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003322:	f000 f809 	bl	8003338 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003326:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_NMI_IRQHandler+0x28>)
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	0052      	lsls	r2, r2, #1
 800332c:	619a      	str	r2, [r3, #24]
  }
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000

08003338 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800334c:	2017      	movs	r0, #23
 800334e:	183b      	adds	r3, r7, r0
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2220      	movs	r2, #32
 800335a:	4013      	ands	r3, r2
 800335c:	d100      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800335e:	e0c2      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003360:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	055b      	lsls	r3, r3, #21
 8003368:	4013      	ands	r3, r2
 800336a:	d109      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b86      	ldr	r3, [pc, #536]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800336e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003370:	4b85      	ldr	r3, [pc, #532]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	0549      	lsls	r1, r1, #21
 8003376:	430a      	orrs	r2, r1
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800337a:	183b      	adds	r3, r7, r0
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b82      	ldr	r3, [pc, #520]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4013      	ands	r3, r2
 800338a:	d11a      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338c:	4b7f      	ldr	r3, [pc, #508]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b7e      	ldr	r3, [pc, #504]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	0049      	lsls	r1, r1, #1
 8003396:	430a      	orrs	r2, r1
 8003398:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fd fe01 	bl	8000fa0 <HAL_GetTick>
 800339e:	0003      	movs	r3, r0
 80033a0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	e008      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a4:	f7fd fdfc 	bl	8000fa0 <HAL_GetTick>
 80033a8:	0002      	movs	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0e3      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b75      	ldr	r3, [pc, #468]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4013      	ands	r3, r2
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033c2:	4b71      	ldr	r3, [pc, #452]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	23c0      	movs	r3, #192	; 0xc0
 80033c8:	039b      	lsls	r3, r3, #14
 80033ca:	4013      	ands	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	23c0      	movs	r3, #192	; 0xc0
 80033d4:	039b      	lsls	r3, r3, #14
 80033d6:	4013      	ands	r3, r2
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d013      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	23c0      	movs	r3, #192	; 0xc0
 80033e4:	029b      	lsls	r3, r3, #10
 80033e6:	401a      	ands	r2, r3
 80033e8:	23c0      	movs	r3, #192	; 0xc0
 80033ea:	029b      	lsls	r3, r3, #10
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d10a      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033f0:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	401a      	ands	r2, r3
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	429a      	cmp	r2, r3
 8003400:	d101      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e0bb      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003406:	4b60      	ldr	r3, [pc, #384]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340a:	23c0      	movs	r3, #192	; 0xc0
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d03b      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	23c0      	movs	r3, #192	; 0xc0
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	4013      	ands	r3, r2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	429a      	cmp	r2, r3
 8003426:	d033      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2220      	movs	r2, #32
 800342e:	4013      	ands	r3, r2
 8003430:	d02e      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003432:	4b55      	ldr	r3, [pc, #340]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800343c:	4b52      	ldr	r3, [pc, #328]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800343e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003440:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	0309      	lsls	r1, r1, #12
 8003446:	430a      	orrs	r2, r1
 8003448:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800344a:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800344c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800344e:	4b4e      	ldr	r3, [pc, #312]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003450:	4950      	ldr	r1, [pc, #320]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003452:	400a      	ands	r2, r1
 8003454:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003456:	4b4c      	ldr	r3, [pc, #304]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4013      	ands	r3, r2
 8003464:	d014      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fd fd9b 	bl	8000fa0 <HAL_GetTick>
 800346a:	0003      	movs	r3, r0
 800346c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800346e:	e009      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fd fd96 	bl	8000fa0 <HAL_GetTick>
 8003474:	0002      	movs	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	4a47      	ldr	r2, [pc, #284]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e07c      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4013      	ands	r3, r2
 800348e:	d0ef      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	23c0      	movs	r3, #192	; 0xc0
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	401a      	ands	r2, r3
 800349a:	23c0      	movs	r3, #192	; 0xc0
 800349c:	029b      	lsls	r3, r3, #10
 800349e:	429a      	cmp	r2, r3
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3d      	ldr	r2, [pc, #244]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	23c0      	movs	r3, #192	; 0xc0
 80034b2:	039b      	lsls	r3, r3, #14
 80034b4:	401a      	ands	r2, r3
 80034b6:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	23c0      	movs	r3, #192	; 0xc0
 80034c6:	029b      	lsls	r3, r3, #10
 80034c8:	401a      	ands	r2, r3
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034cc:	430a      	orrs	r2, r1
 80034ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034d0:	2317      	movs	r3, #23
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034de:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034e0:	492f      	ldr	r1, [pc, #188]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	2203      	movs	r2, #3
 80034f6:	4393      	bics	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003500:	430a      	orrs	r2, r1
 8003502:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2202      	movs	r2, #2
 800350a:	4013      	ands	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	220c      	movs	r2, #12
 8003514:	4393      	bics	r3, r2
 8003516:	0019      	movs	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800351e:	430a      	orrs	r2, r1
 8003520:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2204      	movs	r2, #4
 8003528:	4013      	ands	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800353c:	430a      	orrs	r2, r1
 800353e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2208      	movs	r2, #8
 8003546:	4013      	ands	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354e:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800355a:	430a      	orrs	r2, r1
 800355c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	4013      	ands	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800356a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356c:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003578:	430a      	orrs	r2, r1
 800357a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b006      	add	sp, #24
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
 8003590:	fffcffff 	.word	0xfffcffff
 8003594:	fff7ffff 	.word	0xfff7ffff
 8003598:	00001388 	.word	0x00001388
 800359c:	ffcfffff 	.word	0xffcfffff
 80035a0:	efffffff 	.word	0xefffffff
 80035a4:	fffff3ff 	.word	0xfffff3ff
 80035a8:	ffffcfff 	.word	0xffffcfff
 80035ac:	fff3ffff 	.word	0xfff3ffff

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e032      	b.n	8003628 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2239      	movs	r2, #57	; 0x39
 80035c6:	5c9b      	ldrb	r3, [r3, r2]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2238      	movs	r2, #56	; 0x38
 80035d2:	2100      	movs	r1, #0
 80035d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fd fbc1 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2239      	movs	r2, #57	; 0x39
 80035e2:	2102      	movs	r1, #2
 80035e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	0019      	movs	r1, r3
 80035f0:	0010      	movs	r0, r2
 80035f2:	f000 f997 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223e      	movs	r2, #62	; 0x3e
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	223a      	movs	r2, #58	; 0x3a
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	223b      	movs	r2, #59	; 0x3b
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	223c      	movs	r2, #60	; 0x3c
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	223d      	movs	r2, #61	; 0x3d
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2239      	movs	r2, #57	; 0x39
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2239      	movs	r2, #57	; 0x39
 800363c:	5c9b      	ldrb	r3, [r3, r2]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e036      	b.n	80036b6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2239      	movs	r2, #57	; 0x39
 800364c:	2102      	movs	r1, #2
 800364e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2101      	movs	r1, #1
 800365c:	430a      	orrs	r2, r1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	05db      	lsls	r3, r3, #23
 8003668:	429a      	cmp	r2, r3
 800366a:	d009      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x50>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <HAL_TIM_Base_Start_IT+0x90>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x50>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <HAL_TIM_Base_Start_IT+0x94>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d111      	bne.n	80036a4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2207      	movs	r2, #7
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b06      	cmp	r3, #6
 8003690:	d010      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a2:	e007      	b.n	80036b4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2101      	movs	r1, #1
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	40010800 	.word	0x40010800
 80036c4:	40011400 	.word	0x40011400

080036c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2101      	movs	r1, #1
 80036dc:	438a      	bics	r2, r1
 80036de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_TIM_Base_Stop_IT+0x48>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_Base_Stop_IT+0x34>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2101      	movs	r1, #1
 80036f8:	438a      	bics	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2239      	movs	r2, #57	; 0x39
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	00001111 	.word	0x00001111

08003714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2202      	movs	r2, #2
 8003724:	4013      	ands	r3, r2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d124      	bne.n	8003774 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d11d      	bne.n	8003774 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2203      	movs	r2, #3
 800373e:	4252      	negs	r2, r2
 8003740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2203      	movs	r2, #3
 8003750:	4013      	ands	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	0018      	movs	r0, r3
 8003758:	f000 f8cc 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 800375c:	e007      	b.n	800376e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f8bf 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 f8cb 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2204      	movs	r2, #4
 800377c:	4013      	ands	r3, r2
 800377e:	2b04      	cmp	r3, #4
 8003780:	d125      	bne.n	80037ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2204      	movs	r2, #4
 800378a:	4013      	ands	r3, r2
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11e      	bne.n	80037ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2205      	movs	r2, #5
 8003796:	4252      	negs	r2, r2
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	23c0      	movs	r3, #192	; 0xc0
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4013      	ands	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f89f 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 80037b6:	e007      	b.n	80037c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 f892 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f89e 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2208      	movs	r2, #8
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d124      	bne.n	8003826 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2208      	movs	r2, #8
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d11d      	bne.n	8003826 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2209      	movs	r2, #9
 80037f0:	4252      	negs	r2, r2
 80037f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2204      	movs	r2, #4
 80037f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2203      	movs	r2, #3
 8003802:	4013      	ands	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f873 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 800380e:	e007      	b.n	8003820 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0018      	movs	r0, r3
 8003814:	f000 f866 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0018      	movs	r0, r3
 800381c:	f000 f872 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2210      	movs	r2, #16
 800382e:	4013      	ands	r3, r2
 8003830:	2b10      	cmp	r3, #16
 8003832:	d125      	bne.n	8003880 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2210      	movs	r2, #16
 800383c:	4013      	ands	r3, r2
 800383e:	2b10      	cmp	r3, #16
 8003840:	d11e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2211      	movs	r2, #17
 8003848:	4252      	negs	r2, r2
 800384a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2208      	movs	r2, #8
 8003850:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	23c0      	movs	r3, #192	; 0xc0
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4013      	ands	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0018      	movs	r0, r3
 8003864:	f000 f846 	bl	80038f4 <HAL_TIM_IC_CaptureCallback>
 8003868:	e007      	b.n	800387a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 f839 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	0018      	movs	r0, r3
 8003876:	f000 f845 	bl	8003904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2201      	movs	r2, #1
 8003888:	4013      	ands	r3, r2
 800388a:	2b01      	cmp	r3, #1
 800388c:	d10f      	bne.n	80038ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2202      	movs	r2, #2
 80038a2:	4252      	negs	r2, r2
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fd f941 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2240      	movs	r2, #64	; 0x40
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d10f      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d108      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2241      	movs	r2, #65	; 0x41
 80038d0:	4252      	negs	r2, r2
 80038d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 f81c 	bl	8003914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	2380      	movs	r3, #128	; 0x80
 8003938:	05db      	lsls	r3, r3, #23
 800393a:	429a      	cmp	r2, r3
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x2a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <TIM_Base_SetConfig+0x9c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x2a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1e      	ldr	r2, [pc, #120]	; (80039c4 <TIM_Base_SetConfig+0xa0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2270      	movs	r2, #112	; 0x70
 8003952:	4393      	bics	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	05db      	lsls	r3, r3, #23
 8003966:	429a      	cmp	r2, r3
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x56>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <TIM_Base_SetConfig+0x9c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x56>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <TIM_Base_SetConfig+0xa0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <TIM_Base_SetConfig+0xa4>)
 800397e:	4013      	ands	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	4393      	bics	r3, r2
 8003992:	001a      	movs	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	615a      	str	r2, [r3, #20]
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b004      	add	sp, #16
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010800 	.word	0x40010800
 80039c4:	40011400 	.word	0x40011400
 80039c8:	fffffcff 	.word	0xfffffcff

080039cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2238      	movs	r2, #56	; 0x38
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e042      	b.n	8003a6a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2238      	movs	r2, #56	; 0x38
 80039e8:	2101      	movs	r1, #1
 80039ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2239      	movs	r2, #57	; 0x39
 80039f0:	2102      	movs	r1, #2
 80039f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2270      	movs	r2, #112	; 0x70
 8003a08:	4393      	bics	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	05db      	lsls	r3, r3, #23
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d009      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10c      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	4393      	bics	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2239      	movs	r2, #57	; 0x39
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2238      	movs	r2, #56	; 0x38
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b004      	add	sp, #16
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	40010800 	.word	0x40010800
 8003a78:	40011400 	.word	0x40011400

08003a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e044      	b.n	8003b18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2274      	movs	r2, #116	; 0x74
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7fd f97d 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2224      	movs	r2, #36	; 0x24
 8003aaa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	438a      	bics	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 f9c6 	bl	8003e50 <UART_SetConfig>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e024      	b.n	8003b18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f000 fc3d 	bl	8004358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	490d      	ldr	r1, [pc, #52]	; (8003b20 <HAL_UART_Init+0xa4>)
 8003aea:	400a      	ands	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	212a      	movs	r1, #42	; 0x2a
 8003afa:	438a      	bics	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 fcd5 	bl	80044c0 <UART_CheckIdleState>
 8003b16:	0003      	movs	r3, r0
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	ffffb7ff 	.word	0xffffb7ff

08003b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	1dbb      	adds	r3, r7, #6
 8003b32:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d000      	beq.n	8003b3e <HAL_UART_Transmit+0x1a>
 8003b3c:	e095      	b.n	8003c6a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_UART_Transmit+0x28>
 8003b44:	1dbb      	adds	r3, r7, #6
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e08d      	b.n	8003c6c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	015b      	lsls	r3, r3, #5
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d109      	bne.n	8003b70 <HAL_UART_Transmit+0x4c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2201      	movs	r2, #1
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d001      	beq.n	8003b70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e07d      	b.n	8003c6c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2274      	movs	r2, #116	; 0x74
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Transmit+0x5a>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e076      	b.n	8003c6c <HAL_UART_Transmit+0x148>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2274      	movs	r2, #116	; 0x74
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2221      	movs	r2, #33	; 0x21
 8003b92:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b94:	f7fd fa04 	bl	8000fa0 <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1dba      	adds	r2, r7, #6
 8003ba0:	2150      	movs	r1, #80	; 0x50
 8003ba2:	8812      	ldrh	r2, [r2, #0]
 8003ba4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2152      	movs	r1, #82	; 0x52
 8003bac:	8812      	ldrh	r2, [r2, #0]
 8003bae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	015b      	lsls	r3, r3, #5
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d108      	bne.n	8003bce <HAL_UART_Transmit+0xaa>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	e003      	b.n	8003bd6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2274      	movs	r2, #116	; 0x74
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003bde:	e02c      	b.n	8003c3a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	0013      	movs	r3, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	2180      	movs	r1, #128	; 0x80
 8003bee:	f000 fcaf 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	1e03      	subs	r3, r0, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e038      	b.n	8003c6c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	001a      	movs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	05d2      	lsls	r2, r2, #23
 8003c0c:	0dd2      	lsrs	r2, r2, #23
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3302      	adds	r3, #2
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e007      	b.n	8003c28 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2252      	movs	r2, #82	; 0x52
 8003c2c:	5a9b      	ldrh	r3, [r3, r2]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b299      	uxth	r1, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2252      	movs	r2, #82	; 0x52
 8003c38:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2252      	movs	r2, #82	; 0x52
 8003c3e:	5a9b      	ldrh	r3, [r3, r2]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1cc      	bne.n	8003be0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	0013      	movs	r3, r2
 8003c50:	2200      	movs	r2, #0
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	f000 fc7c 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 8003c58:	1e03      	subs	r3, r0, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e005      	b.n	8003c6c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
  }
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b008      	add	sp, #32
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	1dbb      	adds	r3, r7, #6
 8003c82:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d000      	beq.n	8003c8e <HAL_UART_Receive+0x1a>
 8003c8c:	e0d9      	b.n	8003e42 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_UART_Receive+0x28>
 8003c94:	1dbb      	adds	r3, r7, #6
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0d1      	b.n	8003e44 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	015b      	lsls	r3, r3, #5
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d109      	bne.n	8003cc0 <HAL_UART_Receive+0x4c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0c1      	b.n	8003e44 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2274      	movs	r2, #116	; 0x74
 8003cc4:	5c9b      	ldrb	r3, [r3, r2]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Receive+0x5a>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e0ba      	b.n	8003e44 <HAL_UART_Receive+0x1d0>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2274      	movs	r2, #116	; 0x74
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2222      	movs	r2, #34	; 0x22
 8003ce2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cea:	f7fd f959 	bl	8000fa0 <HAL_GetTick>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1dba      	adds	r2, r7, #6
 8003cf6:	2158      	movs	r1, #88	; 0x58
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1dba      	adds	r2, r7, #6
 8003d00:	215a      	movs	r1, #90	; 0x5a
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d10d      	bne.n	8003d2e <HAL_UART_Receive+0xba>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_UART_Receive+0xb0>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	225c      	movs	r2, #92	; 0x5c
 8003d1e:	494b      	ldr	r1, [pc, #300]	; (8003e4c <HAL_UART_Receive+0x1d8>)
 8003d20:	5299      	strh	r1, [r3, r2]
 8003d22:	e02e      	b.n	8003d82 <HAL_UART_Receive+0x10e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	225c      	movs	r2, #92	; 0x5c
 8003d28:	21ff      	movs	r1, #255	; 0xff
 8003d2a:	5299      	strh	r1, [r3, r2]
 8003d2c:	e029      	b.n	8003d82 <HAL_UART_Receive+0x10e>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10d      	bne.n	8003d52 <HAL_UART_Receive+0xde>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <HAL_UART_Receive+0xd4>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	225c      	movs	r2, #92	; 0x5c
 8003d42:	21ff      	movs	r1, #255	; 0xff
 8003d44:	5299      	strh	r1, [r3, r2]
 8003d46:	e01c      	b.n	8003d82 <HAL_UART_Receive+0x10e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	225c      	movs	r2, #92	; 0x5c
 8003d4c:	217f      	movs	r1, #127	; 0x7f
 8003d4e:	5299      	strh	r1, [r3, r2]
 8003d50:	e017      	b.n	8003d82 <HAL_UART_Receive+0x10e>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	055b      	lsls	r3, r3, #21
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10d      	bne.n	8003d7a <HAL_UART_Receive+0x106>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_UART_Receive+0xfc>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	225c      	movs	r2, #92	; 0x5c
 8003d6a:	217f      	movs	r1, #127	; 0x7f
 8003d6c:	5299      	strh	r1, [r3, r2]
 8003d6e:	e008      	b.n	8003d82 <HAL_UART_Receive+0x10e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	225c      	movs	r2, #92	; 0x5c
 8003d74:	213f      	movs	r1, #63	; 0x3f
 8003d76:	5299      	strh	r1, [r3, r2]
 8003d78:	e003      	b.n	8003d82 <HAL_UART_Receive+0x10e>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	225c      	movs	r2, #92	; 0x5c
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003d82:	2312      	movs	r3, #18
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	215c      	movs	r1, #92	; 0x5c
 8003d8a:	5a52      	ldrh	r2, [r2, r1]
 8003d8c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	2380      	movs	r3, #128	; 0x80
 8003d94:	015b      	lsls	r3, r3, #5
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d108      	bne.n	8003dac <HAL_UART_Receive+0x138>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e003      	b.n	8003db4 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2274      	movs	r2, #116	; 0x74
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003dbc:	e036      	b.n	8003e2c <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	0013      	movs	r3, r2
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2120      	movs	r1, #32
 8003dcc:	f000 fbc0 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e035      	b.n	8003e44 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10e      	bne.n	8003dfc <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2212      	movs	r2, #18
 8003de8:	18ba      	adds	r2, r7, r2
 8003dea:	8812      	ldrh	r2, [r2, #0]
 8003dec:	4013      	ands	r3, r2
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	3302      	adds	r3, #2
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e00e      	b.n	8003e1a <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2212      	movs	r2, #18
 8003e06:	18ba      	adds	r2, r7, r2
 8003e08:	8812      	ldrh	r2, [r2, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	225a      	movs	r2, #90	; 0x5a
 8003e1e:	5a9b      	ldrh	r3, [r3, r2]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b299      	uxth	r1, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	225a      	movs	r2, #90	; 0x5a
 8003e2a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	225a      	movs	r2, #90	; 0x5a
 8003e30:	5a9b      	ldrh	r3, [r3, r2]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1c2      	bne.n	8003dbe <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b008      	add	sp, #32
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	000001ff 	.word	0x000001ff

08003e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b08e      	sub	sp, #56	; 0x38
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e58:	231a      	movs	r3, #26
 8003e5a:	2218      	movs	r2, #24
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4ac6      	ldr	r2, [pc, #792]	; (800419c <UART_SetConfig+0x34c>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	0019      	movs	r1, r3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4ac1      	ldr	r2, [pc, #772]	; (80041a0 <UART_SetConfig+0x350>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4abb      	ldr	r2, [pc, #748]	; (80041a4 <UART_SetConfig+0x354>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4ab7      	ldr	r2, [pc, #732]	; (80041a8 <UART_SetConfig+0x358>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	0019      	movs	r1, r3
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4ab3      	ldr	r2, [pc, #716]	; (80041ac <UART_SetConfig+0x35c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d131      	bne.n	8003f48 <UART_SetConfig+0xf8>
 8003ee4:	4bb2      	ldr	r3, [pc, #712]	; (80041b0 <UART_SetConfig+0x360>)
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee8:	2203      	movs	r2, #3
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d01d      	beq.n	8003f2c <UART_SetConfig+0xdc>
 8003ef0:	d823      	bhi.n	8003f3a <UART_SetConfig+0xea>
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d00c      	beq.n	8003f10 <UART_SetConfig+0xc0>
 8003ef6:	d820      	bhi.n	8003f3a <UART_SetConfig+0xea>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <UART_SetConfig+0xb2>
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d00e      	beq.n	8003f1e <UART_SetConfig+0xce>
 8003f00:	e01b      	b.n	8003f3a <UART_SetConfig+0xea>
 8003f02:	231b      	movs	r3, #27
 8003f04:	2218      	movs	r2, #24
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	19db      	adds	r3, r3, r7
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e09c      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f10:	231b      	movs	r3, #27
 8003f12:	2218      	movs	r2, #24
 8003f14:	189b      	adds	r3, r3, r2
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	2202      	movs	r2, #2
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e095      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f1e:	231b      	movs	r3, #27
 8003f20:	2218      	movs	r2, #24
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	2204      	movs	r2, #4
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e08e      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f2c:	231b      	movs	r3, #27
 8003f2e:	2218      	movs	r2, #24
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	19db      	adds	r3, r3, r7
 8003f34:	2208      	movs	r2, #8
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e087      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f3a:	231b      	movs	r3, #27
 8003f3c:	2218      	movs	r2, #24
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	19db      	adds	r3, r3, r7
 8003f42:	2210      	movs	r2, #16
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e080      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a99      	ldr	r2, [pc, #612]	; (80041b4 <UART_SetConfig+0x364>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d131      	bne.n	8003fb6 <UART_SetConfig+0x166>
 8003f52:	4b97      	ldr	r3, [pc, #604]	; (80041b0 <UART_SetConfig+0x360>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	220c      	movs	r2, #12
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d01d      	beq.n	8003f9a <UART_SetConfig+0x14a>
 8003f5e:	d823      	bhi.n	8003fa8 <UART_SetConfig+0x158>
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d00c      	beq.n	8003f7e <UART_SetConfig+0x12e>
 8003f64:	d820      	bhi.n	8003fa8 <UART_SetConfig+0x158>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <UART_SetConfig+0x120>
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d00e      	beq.n	8003f8c <UART_SetConfig+0x13c>
 8003f6e:	e01b      	b.n	8003fa8 <UART_SetConfig+0x158>
 8003f70:	231b      	movs	r3, #27
 8003f72:	2218      	movs	r2, #24
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	19db      	adds	r3, r3, r7
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e065      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f7e:	231b      	movs	r3, #27
 8003f80:	2218      	movs	r2, #24
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	19db      	adds	r3, r3, r7
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e05e      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f8c:	231b      	movs	r3, #27
 8003f8e:	2218      	movs	r2, #24
 8003f90:	189b      	adds	r3, r3, r2
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	2204      	movs	r2, #4
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e057      	b.n	800404a <UART_SetConfig+0x1fa>
 8003f9a:	231b      	movs	r3, #27
 8003f9c:	2218      	movs	r2, #24
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	19db      	adds	r3, r3, r7
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e050      	b.n	800404a <UART_SetConfig+0x1fa>
 8003fa8:	231b      	movs	r3, #27
 8003faa:	2218      	movs	r2, #24
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	19db      	adds	r3, r3, r7
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e049      	b.n	800404a <UART_SetConfig+0x1fa>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7a      	ldr	r2, [pc, #488]	; (80041a4 <UART_SetConfig+0x354>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d13e      	bne.n	800403e <UART_SetConfig+0x1ee>
 8003fc0:	4b7b      	ldr	r3, [pc, #492]	; (80041b0 <UART_SetConfig+0x360>)
 8003fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fc4:	23c0      	movs	r3, #192	; 0xc0
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4013      	ands	r3, r2
 8003fca:	22c0      	movs	r2, #192	; 0xc0
 8003fcc:	0112      	lsls	r2, r2, #4
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d027      	beq.n	8004022 <UART_SetConfig+0x1d2>
 8003fd2:	22c0      	movs	r2, #192	; 0xc0
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d82a      	bhi.n	8004030 <UART_SetConfig+0x1e0>
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	0112      	lsls	r2, r2, #4
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d011      	beq.n	8004006 <UART_SetConfig+0x1b6>
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	0112      	lsls	r2, r2, #4
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d822      	bhi.n	8004030 <UART_SetConfig+0x1e0>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <UART_SetConfig+0x1a8>
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	00d2      	lsls	r2, r2, #3
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <UART_SetConfig+0x1c4>
 8003ff6:	e01b      	b.n	8004030 <UART_SetConfig+0x1e0>
 8003ff8:	231b      	movs	r3, #27
 8003ffa:	2218      	movs	r2, #24
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e021      	b.n	800404a <UART_SetConfig+0x1fa>
 8004006:	231b      	movs	r3, #27
 8004008:	2218      	movs	r2, #24
 800400a:	189b      	adds	r3, r3, r2
 800400c:	19db      	adds	r3, r3, r7
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e01a      	b.n	800404a <UART_SetConfig+0x1fa>
 8004014:	231b      	movs	r3, #27
 8004016:	2218      	movs	r2, #24
 8004018:	189b      	adds	r3, r3, r2
 800401a:	19db      	adds	r3, r3, r7
 800401c:	2204      	movs	r2, #4
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e013      	b.n	800404a <UART_SetConfig+0x1fa>
 8004022:	231b      	movs	r3, #27
 8004024:	2218      	movs	r2, #24
 8004026:	189b      	adds	r3, r3, r2
 8004028:	19db      	adds	r3, r3, r7
 800402a:	2208      	movs	r2, #8
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e00c      	b.n	800404a <UART_SetConfig+0x1fa>
 8004030:	231b      	movs	r3, #27
 8004032:	2218      	movs	r2, #24
 8004034:	189b      	adds	r3, r3, r2
 8004036:	19db      	adds	r3, r3, r7
 8004038:	2210      	movs	r2, #16
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e005      	b.n	800404a <UART_SetConfig+0x1fa>
 800403e:	231b      	movs	r3, #27
 8004040:	2218      	movs	r2, #24
 8004042:	189b      	adds	r3, r3, r2
 8004044:	19db      	adds	r3, r3, r7
 8004046:	2210      	movs	r2, #16
 8004048:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a55      	ldr	r2, [pc, #340]	; (80041a4 <UART_SetConfig+0x354>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d000      	beq.n	8004056 <UART_SetConfig+0x206>
 8004054:	e084      	b.n	8004160 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004056:	231b      	movs	r3, #27
 8004058:	2218      	movs	r2, #24
 800405a:	189b      	adds	r3, r3, r2
 800405c:	19db      	adds	r3, r3, r7
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d01d      	beq.n	80040a0 <UART_SetConfig+0x250>
 8004064:	dc20      	bgt.n	80040a8 <UART_SetConfig+0x258>
 8004066:	2b04      	cmp	r3, #4
 8004068:	d015      	beq.n	8004096 <UART_SetConfig+0x246>
 800406a:	dc1d      	bgt.n	80040a8 <UART_SetConfig+0x258>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <UART_SetConfig+0x226>
 8004070:	2b02      	cmp	r3, #2
 8004072:	d005      	beq.n	8004080 <UART_SetConfig+0x230>
 8004074:	e018      	b.n	80040a8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004076:	f7ff f91d 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 800407a:	0003      	movs	r3, r0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800407e:	e01c      	b.n	80040ba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004080:	4b4b      	ldr	r3, [pc, #300]	; (80041b0 <UART_SetConfig+0x360>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2210      	movs	r2, #16
 8004086:	4013      	ands	r3, r2
 8004088:	d002      	beq.n	8004090 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800408a:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <UART_SetConfig+0x368>)
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800408e:	e014      	b.n	80040ba <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004090:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <UART_SetConfig+0x36c>)
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004094:	e011      	b.n	80040ba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7ff f85d 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 800409a:	0003      	movs	r3, r0
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800409e:	e00c      	b.n	80040ba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040a6:	e008      	b.n	80040ba <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80040ac:	231a      	movs	r3, #26
 80040ae:	2218      	movs	r2, #24
 80040b0:	189b      	adds	r3, r3, r2
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
        break;
 80040b8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d100      	bne.n	80040c2 <UART_SetConfig+0x272>
 80040c0:	e133      	b.n	800432a <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	0013      	movs	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d305      	bcc.n	80040de <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040da:	429a      	cmp	r2, r3
 80040dc:	d906      	bls.n	80040ec <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80040de:	231a      	movs	r3, #26
 80040e0:	2218      	movs	r2, #24
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e11e      	b.n	800432a <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	6939      	ldr	r1, [r7, #16]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	000b      	movs	r3, r1
 80040fa:	0e1b      	lsrs	r3, r3, #24
 80040fc:	0010      	movs	r0, r2
 80040fe:	0205      	lsls	r5, r0, #8
 8004100:	431d      	orrs	r5, r3
 8004102:	000b      	movs	r3, r1
 8004104:	021c      	lsls	r4, r3, #8
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68b8      	ldr	r0, [r7, #8]
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	1900      	adds	r0, r0, r4
 8004118:	4169      	adcs	r1, r5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f7fc f882 	bl	8000230 <__aeabi_uldivmod>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	0013      	movs	r3, r2
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004136:	23c0      	movs	r3, #192	; 0xc0
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	429a      	cmp	r2, r3
 800413c:	d309      	bcc.n	8004152 <UART_SetConfig+0x302>
 800413e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	035b      	lsls	r3, r3, #13
 8004144:	429a      	cmp	r2, r3
 8004146:	d204      	bcs.n	8004152 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800414e:	60da      	str	r2, [r3, #12]
 8004150:	e0eb      	b.n	800432a <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8004152:	231a      	movs	r3, #26
 8004154:	2218      	movs	r2, #24
 8004156:	189b      	adds	r3, r3, r2
 8004158:	19db      	adds	r3, r3, r7
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e0e4      	b.n	800432a <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	429a      	cmp	r2, r3
 800416a:	d000      	beq.n	800416e <UART_SetConfig+0x31e>
 800416c:	e086      	b.n	800427c <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 800416e:	231b      	movs	r3, #27
 8004170:	2218      	movs	r2, #24
 8004172:	189b      	adds	r3, r3, r2
 8004174:	19db      	adds	r3, r3, r7
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d837      	bhi.n	80041ec <UART_SetConfig+0x39c>
 800417c:	009a      	lsls	r2, r3, #2
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <UART_SetConfig+0x370>)
 8004180:	18d3      	adds	r3, r2, r3
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004186:	f7ff f895 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 800418a:	0003      	movs	r3, r0
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800418e:	e036      	b.n	80041fe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004190:	f7ff f8a6 	bl	80032e0 <HAL_RCC_GetPCLK2Freq>
 8004194:	0003      	movs	r3, r0
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004198:	e031      	b.n	80041fe <UART_SetConfig+0x3ae>
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	efff69f3 	.word	0xefff69f3
 80041a0:	ffffcfff 	.word	0xffffcfff
 80041a4:	40004800 	.word	0x40004800
 80041a8:	fffff4ff 	.word	0xfffff4ff
 80041ac:	40013800 	.word	0x40013800
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40004400 	.word	0x40004400
 80041b8:	003d0900 	.word	0x003d0900
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	08004778 	.word	0x08004778
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <UART_SetConfig+0x4f8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2210      	movs	r2, #16
 80041ca:	4013      	ands	r3, r2
 80041cc:	d002      	beq.n	80041d4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80041ce:	4b5f      	ldr	r3, [pc, #380]	; (800434c <UART_SetConfig+0x4fc>)
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041d2:	e014      	b.n	80041fe <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b5e      	ldr	r3, [pc, #376]	; (8004350 <UART_SetConfig+0x500>)
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041d8:	e011      	b.n	80041fe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7fe ffbb 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80041de:	0003      	movs	r3, r0
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041e2:	e00c      	b.n	80041fe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041ea:	e008      	b.n	80041fe <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80041f0:	231a      	movs	r3, #26
 80041f2:	2218      	movs	r2, #24
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
        break;
 80041fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d100      	bne.n	8004206 <UART_SetConfig+0x3b6>
 8004204:	e091      	b.n	800432a <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	18d2      	adds	r2, r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0019      	movs	r1, r3
 8004218:	0010      	movs	r0, r2
 800421a:	f7fb ff7d 	bl	8000118 <__udivsi3>
 800421e:	0003      	movs	r3, r0
 8004220:	b29b      	uxth	r3, r3
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	2b0f      	cmp	r3, #15
 8004228:	d921      	bls.n	800426e <UART_SetConfig+0x41e>
 800422a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	025b      	lsls	r3, r3, #9
 8004230:	429a      	cmp	r2, r3
 8004232:	d21c      	bcs.n	800426e <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	b29a      	uxth	r2, r3
 8004238:	200e      	movs	r0, #14
 800423a:	2418      	movs	r4, #24
 800423c:	1903      	adds	r3, r0, r4
 800423e:	19db      	adds	r3, r3, r7
 8004240:	210f      	movs	r1, #15
 8004242:	438a      	bics	r2, r1
 8004244:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	b29b      	uxth	r3, r3
 800424c:	2207      	movs	r2, #7
 800424e:	4013      	ands	r3, r2
 8004250:	b299      	uxth	r1, r3
 8004252:	1903      	adds	r3, r0, r4
 8004254:	19db      	adds	r3, r3, r7
 8004256:	1902      	adds	r2, r0, r4
 8004258:	19d2      	adds	r2, r2, r7
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	1902      	adds	r2, r0, r4
 8004266:	19d2      	adds	r2, r2, r7
 8004268:	8812      	ldrh	r2, [r2, #0]
 800426a:	60da      	str	r2, [r3, #12]
 800426c:	e05d      	b.n	800432a <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800426e:	231a      	movs	r3, #26
 8004270:	2218      	movs	r2, #24
 8004272:	189b      	adds	r3, r3, r2
 8004274:	19db      	adds	r3, r3, r7
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e056      	b.n	800432a <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 800427c:	231b      	movs	r3, #27
 800427e:	2218      	movs	r2, #24
 8004280:	189b      	adds	r3, r3, r2
 8004282:	19db      	adds	r3, r3, r7
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b08      	cmp	r3, #8
 8004288:	d822      	bhi.n	80042d0 <UART_SetConfig+0x480>
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <UART_SetConfig+0x504>)
 800428e:	18d3      	adds	r3, r2, r3
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004294:	f7ff f80e 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8004298:	0003      	movs	r3, r0
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800429c:	e021      	b.n	80042e2 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800429e:	f7ff f81f 	bl	80032e0 <HAL_RCC_GetPCLK2Freq>
 80042a2:	0003      	movs	r3, r0
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042a6:	e01c      	b.n	80042e2 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a8:	4b27      	ldr	r3, [pc, #156]	; (8004348 <UART_SetConfig+0x4f8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2210      	movs	r2, #16
 80042ae:	4013      	ands	r3, r2
 80042b0:	d002      	beq.n	80042b8 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <UART_SetConfig+0x4fc>)
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042b6:	e014      	b.n	80042e2 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <UART_SetConfig+0x500>)
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042bc:	e011      	b.n	80042e2 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042be:	f7fe ff49 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80042c2:	0003      	movs	r3, r0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042c6:	e00c      	b.n	80042e2 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ce:	e008      	b.n	80042e2 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80042d4:	231a      	movs	r3, #26
 80042d6:	2218      	movs	r2, #24
 80042d8:	189b      	adds	r3, r3, r2
 80042da:	19db      	adds	r3, r3, r7
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
        break;
 80042e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	085a      	lsrs	r2, r3, #1
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	18d2      	adds	r2, r2, r3
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	0019      	movs	r1, r3
 80042f8:	0010      	movs	r0, r2
 80042fa:	f7fb ff0d 	bl	8000118 <__udivsi3>
 80042fe:	0003      	movs	r3, r0
 8004300:	b29b      	uxth	r3, r3
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d909      	bls.n	800431e <UART_SetConfig+0x4ce>
 800430a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	429a      	cmp	r2, r3
 8004312:	d204      	bcs.n	800431e <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431a:	60da      	str	r2, [r3, #12]
 800431c:	e005      	b.n	800432a <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800431e:	231a      	movs	r3, #26
 8004320:	2218      	movs	r2, #24
 8004322:	189b      	adds	r3, r3, r2
 8004324:	19db      	adds	r3, r3, r7
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	2200      	movs	r2, #0
 800432e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2200      	movs	r2, #0
 8004334:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004336:	231a      	movs	r3, #26
 8004338:	2218      	movs	r2, #24
 800433a:	189b      	adds	r3, r3, r2
 800433c:	19db      	adds	r3, r3, r7
 800433e:	781b      	ldrb	r3, [r3, #0]
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b00e      	add	sp, #56	; 0x38
 8004346:	bdb0      	pop	{r4, r5, r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	003d0900 	.word	0x003d0900
 8004350:	00f42400 	.word	0x00f42400
 8004354:	0800479c 	.word	0x0800479c

08004358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	2201      	movs	r2, #1
 8004366:	4013      	ands	r3, r2
 8004368:	d00b      	beq.n	8004382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a4a      	ldr	r2, [pc, #296]	; (800449c <UART_AdvFeatureConfig+0x144>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2202      	movs	r2, #2
 8004388:	4013      	ands	r3, r2
 800438a:	d00b      	beq.n	80043a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a43      	ldr	r2, [pc, #268]	; (80044a0 <UART_AdvFeatureConfig+0x148>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2204      	movs	r2, #4
 80043aa:	4013      	ands	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a3b      	ldr	r2, [pc, #236]	; (80044a4 <UART_AdvFeatureConfig+0x14c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2208      	movs	r2, #8
 80043cc:	4013      	ands	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a34      	ldr	r2, [pc, #208]	; (80044a8 <UART_AdvFeatureConfig+0x150>)
 80043d8:	4013      	ands	r3, r2
 80043da:	0019      	movs	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	2210      	movs	r2, #16
 80043ee:	4013      	ands	r3, r2
 80043f0:	d00b      	beq.n	800440a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <UART_AdvFeatureConfig+0x154>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	0019      	movs	r1, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	2220      	movs	r2, #32
 8004410:	4013      	ands	r3, r2
 8004412:	d00b      	beq.n	800442c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <UART_AdvFeatureConfig+0x158>)
 800441c:	4013      	ands	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2240      	movs	r2, #64	; 0x40
 8004432:	4013      	ands	r3, r2
 8004434:	d01d      	beq.n	8004472 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <UART_AdvFeatureConfig+0x15c>)
 800443e:	4013      	ands	r3, r2
 8004440:	0019      	movs	r1, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	035b      	lsls	r3, r3, #13
 8004456:	429a      	cmp	r2, r3
 8004458:	d10b      	bne.n	8004472 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <UART_AdvFeatureConfig+0x160>)
 8004462:	4013      	ands	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	4013      	ands	r3, r2
 800447a:	d00b      	beq.n	8004494 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4a0e      	ldr	r2, [pc, #56]	; (80044bc <UART_AdvFeatureConfig+0x164>)
 8004484:	4013      	ands	r3, r2
 8004486:	0019      	movs	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}
 800449c:	fffdffff 	.word	0xfffdffff
 80044a0:	fffeffff 	.word	0xfffeffff
 80044a4:	fffbffff 	.word	0xfffbffff
 80044a8:	ffff7fff 	.word	0xffff7fff
 80044ac:	ffffefff 	.word	0xffffefff
 80044b0:	ffffdfff 	.word	0xffffdfff
 80044b4:	ffefffff 	.word	0xffefffff
 80044b8:	ff9fffff 	.word	0xff9fffff
 80044bc:	fff7ffff 	.word	0xfff7ffff

080044c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2280      	movs	r2, #128	; 0x80
 80044cc:	2100      	movs	r1, #0
 80044ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044d0:	f7fc fd66 	bl	8000fa0 <HAL_GetTick>
 80044d4:	0003      	movs	r3, r0
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2208      	movs	r2, #8
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d10c      	bne.n	8004500 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2280      	movs	r2, #128	; 0x80
 80044ea:	0391      	lsls	r1, r2, #14
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4a17      	ldr	r2, [pc, #92]	; (800454c <UART_CheckIdleState+0x8c>)
 80044f0:	9200      	str	r2, [sp, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f000 f82c 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 80044f8:	1e03      	subs	r3, r0, #0
 80044fa:	d001      	beq.n	8004500 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e021      	b.n	8004544 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2204      	movs	r2, #4
 8004508:	4013      	ands	r3, r2
 800450a:	2b04      	cmp	r3, #4
 800450c:	d10c      	bne.n	8004528 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	03d1      	lsls	r1, r2, #15
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <UART_CheckIdleState+0x8c>)
 8004518:	9200      	str	r2, [sp, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	f000 f818 	bl	8004550 <UART_WaitOnFlagUntilTimeout>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d001      	beq.n	8004528 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e00d      	b.n	8004544 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2274      	movs	r2, #116	; 0x74
 800453e:	2100      	movs	r1, #0
 8004540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	0018      	movs	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	b004      	add	sp, #16
 800454a:	bd80      	pop	{r7, pc}
 800454c:	01ffffff 	.word	0x01ffffff

08004550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b094      	sub	sp, #80	; 0x50
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004560:	e0a3      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004564:	3301      	adds	r3, #1
 8004566:	d100      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004568:	e09f      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456a:	f7fc fd19 	bl	8000fa0 <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <UART_WaitOnFlagUntilTimeout+0x30>
 800457a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457c:	2b00      	cmp	r3, #0
 800457e:	d13d      	bne.n	80045fc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004580:	f3ef 8310 	mrs	r3, PRIMASK
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004588:	647b      	str	r3, [r7, #68]	; 0x44
 800458a:	2301      	movs	r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	f383 8810 	msr	PRIMASK, r3
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	494c      	ldr	r1, [pc, #304]	; (80046d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80045a2:	400a      	ands	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b2:	f3ef 8310 	mrs	r3, PRIMASK
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	643b      	str	r3, [r7, #64]	; 0x40
 80045bc:	2301      	movs	r3, #1
 80045be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	f383 8810 	msr	PRIMASK, r3
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2101      	movs	r1, #1
 80045d4:	438a      	bics	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2274      	movs	r2, #116	; 0x74
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e067      	b.n	80046cc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2204      	movs	r2, #4
 8004604:	4013      	ands	r3, r2
 8004606:	d050      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	401a      	ands	r2, r3
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	429a      	cmp	r2, r3
 800461a:	d146      	bne.n	80046aa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004626:	f3ef 8310 	mrs	r3, PRIMASK
 800462a:	613b      	str	r3, [r7, #16]
  return(result);
 800462c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4923      	ldr	r1, [pc, #140]	; (80046d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004648:	400a      	ands	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	61fb      	str	r3, [r7, #28]
  return(result);
 800465e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	64bb      	str	r3, [r7, #72]	; 0x48
 8004662:	2301      	movs	r3, #1
 8004664:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	438a      	bics	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2280      	movs	r2, #128	; 0x80
 800469a:	2120      	movs	r1, #32
 800469c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2274      	movs	r2, #116	; 0x74
 80046a2:	2100      	movs	r1, #0
 80046a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e010      	b.n	80046cc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	4013      	ands	r3, r2
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	425a      	negs	r2, r3
 80046ba:	4153      	adcs	r3, r2
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	001a      	movs	r2, r3
 80046c0:	1dfb      	adds	r3, r7, #7
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d100      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0x17a>
 80046c8:	e74b      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b014      	add	sp, #80	; 0x50
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	fffffe5f 	.word	0xfffffe5f

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	2600      	movs	r6, #0
 80046dc:	4d0c      	ldr	r5, [pc, #48]	; (8004710 <__libc_init_array+0x38>)
 80046de:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046e0:	1b64      	subs	r4, r4, r5
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	2600      	movs	r6, #0
 80046ea:	f000 f821 	bl	8004730 <_init>
 80046ee:	4d0a      	ldr	r5, [pc, #40]	; (8004718 <__libc_init_array+0x40>)
 80046f0:	4c0a      	ldr	r4, [pc, #40]	; (800471c <__libc_init_array+0x44>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	00b3      	lsls	r3, r6, #2
 80046fe:	58eb      	ldr	r3, [r5, r3]
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	00b3      	lsls	r3, r6, #2
 8004708:	58eb      	ldr	r3, [r5, r3]
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	080047c8 	.word	0x080047c8
 8004714:	080047c8 	.word	0x080047c8
 8004718:	080047c8 	.word	0x080047c8
 800471c:	080047cc 	.word	0x080047cc

08004720 <memset>:
 8004720:	0003      	movs	r3, r0
 8004722:	1882      	adds	r2, r0, r2
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	7019      	strb	r1, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <_init>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr

0800473c <_fini>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr
